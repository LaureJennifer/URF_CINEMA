@using URF_Cinema.Application.DataTransferObjects.Department
@using URF_Cinema.Application.DataTransferObjects.Department.Request
@using URF_Cinema.Application.DataTransferObjects.User
@using URF_Cinema.Client.Components.Dialog.Login
@using URF_Cinema.Client.Repositories.Interfaces
@using URF_Cinema.Domain.Enums
@using URF_Cinema.Infrastructure.Extensions
@using Microsoft.AspNetCore.Components.Authorization
@inject IDialogService DialogService
@inject NavigationManager _navigationManager
@inject EntityStatusExtensions _entityStatusExtensions
@inject AuthenticationStateProvider _authProvider
@inject IJSRuntime _js
@inherits LayoutComponentBase

<RadzenComponents/>
<MudThemeProvider />
<MudPopoverProvider />
<MudDialogProvider />
<MudSnackbarProvider />

<MudLayout>
    <MudAppBar Style="background-color:#03213B">
        <MudGrid>
            <MudItem xs="3" md="3" lg="3">
                <MudText Class="mt-4" Style="color:#f2ffff" Typo="Typo.h6">URF CINEMA</MudText>
            </MudItem>
            <MudItem xs="1" md="1" lg="1">
                <MudText @onclick="()=>Onclick()" Class="mt-4" Style="color:#f2ffff" Typo="Typo.h6">Phim</MudText>
            </MudItem>
            <MudItem xs="2" md="2" lg="2">
                <MudText Class="mt-4" Href="/FilmSchedule" Typo="Typo.h6">Lịch chiếu</MudText>
            </MudItem>
            <MudItem xs="3" md="3" lg="3">
                
            @if(_lstDepartment == null)
            {
                <MudAlert Severity="Severity.Warning">Không có dữ liệu</MudAlert>
            }
            else
            {
                @if (_lstDepartment.Count <= 0)
                {
                    <MudAlert Severity="Severity.Warning">Không có dữ liệu</MudAlert>
                }
                else
                {
                    <MudSelect T="string" Label="Rạp" Value="SelectedDepartmentName" ValueChanged="(str)=>OnSelectedDepartment(str)">
                            @if (_lstDepartment != null && _lstDepartment.Any())
                            {
                                @foreach (var department in _lstDepartment)
                                {
                                    <MudSelectItem T="string" Value="@department.Name">@department.Name</MudSelectItem>
                                }
                            }
                    </MudSelect>
                }
            }
            </MudItem>
            <MudItem xs="2" md="2" lg="2" Class="mt-1" Style="text-align:center">
                <MudLink Href="/login"><MudButton Variant="MudBlazor.Variant.Filled" Color="Color.Success">Tài Khoản</MudButton></MudLink>
                    </MudItem>
                 </MudGrid>
       
    </MudAppBar>
    <CascadingValue Value="SelectedDepartmentName">
        <MudMainContent>
            @Body
        </MudMainContent>
    </CascadingValue>
    <Footer/>
    <MudScrollToTop>
        <MudFab Color="Color.Primary" StartIcon="@Icons.Material.Filled.KeyboardArrowUp" />
    </MudScrollToTop>
</MudLayout>

@code {

    [Inject] public IDepartmentRepo _departmentRepo { get; set; }

    [Inject]
    public IUserRepo _userRepo{ get; set; }

    [Parameter]
    public Guid IdUser{ get; set; }

    List<DepartmentDto>? _lstDepartment { get; set; }
    UserDto _userDto = new();
    ViewDepartmentWithPaginationRequest _request = new(){PageSize=50};

    public string SelectedDepartmentName { get; set; }

    public string Search { get; set; }
    bool _drawerOpen = true;
    private async Task LoadDepartmentForSelect()
    {
        var result = await _departmentRepo.GetAllActive(_request);
        _lstDepartment = result.Data!.Data!.ToList();

        // // Set the default department name after loading the list
        // if (_lstDepartment != null && _lstDepartment.Any())
        // {
        //     // Set to the first department as default
        //     SelectedDepartmentName = _lstDepartment.First().Name;
        // }
    }

    protected override async Task OnInitializedAsync()
    {

        await LoadDepartmentForSelect();
        SelectedDepartmentName = _lstDepartment!.First().Name;
        // await LoadData();
    }

    async Task LoadData()
    {
        var result = await _userRepo.GetByIdAsync(IdUser);
        _userDto = result.Data!;
    }


    async Task OnSelectedDepartment(string departmentName)
    {       
        SelectedDepartmentName = departmentName;
        await Task.Delay(100);
        _navigationManager.NavigateTo($"/"); 
        StateHasChanged();
    }

    // protected override async Task OnAfterRenderAsync(bool firstRender)
    // {
    //     if (firstRender)
    //     {
    //         // Check localStorage only if not already set
    //         if (string.IsNullOrEmpty(SelectedDepartmentName))
    //         {
    //             var storedDepartment = await _js.InvokeAsync<string>("localStorage.getItem", "selectedDepartment");
    //             if (!string.IsNullOrEmpty(storedDepartment) &&
    //                 _lstDepartment!.Any(d => d.Name == storedDepartment))
    //             {
    //                 SelectedDepartmentName = storedDepartment;
    //             }
    //             else if (_lstDepartment!.Any())
    //             {
    //                 SelectedDepartmentName = _lstDepartment!.First().Name; // Set first department if none is selected
    //             }

    //             StateHasChanged(); // Refresh UI if necessary
    //         }
    //     }
    // }
    


    private void Onclick()
    {
        // Chuyển hướng đến trang đặt vé với thông tin phim
        _navigationManager.NavigateTo($"/");
    }
    

    void DrawerToggle()
    {
        _drawerOpen = !_drawerOpen;
    }
    
    private void OpenDialog()
    {
        MudBlazor.DialogOptions closeOnEscapeKey = new MudBlazor.DialogOptions() { CloseOnEscapeKey = true };

        DialogService.Show<Login>("", closeOnEscapeKey);
    }
}
