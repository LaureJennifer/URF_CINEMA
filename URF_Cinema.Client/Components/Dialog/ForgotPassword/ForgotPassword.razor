@inject ISnackbar _snackbar
@using System.Text.RegularExpressions
@using System.ComponentModel.DataAnnotations
@inject IDialogService DialogService

<MudDialog>
    <DialogContent>
        <MudForm>
            <MudCardContent>
                <MudTextField T="string" Label="Email hoặc Số Điện Thoại" @bind-Value="userInput" />

                @if (isVerificationSent)
                {
                    <MudTextField T="string" Label="Nhập mã xác nhận" @bind-Value="verificationCode" />
                }

                @if (isCodeConfirmed)
                {
                    <MudTextField T="string" Label="Mật Khẩu Mới" @bind-Value="newPassword" Type="password" />
                    <MudTextField T="string" Label="Nhập Lại Mật Khẩu" @bind-Value="confirmPassword" Type="password" />
                }
            </MudCardContent>
        </MudForm>
    </DialogContent>
    <DialogActions>
        <MudButton Color="Color.Error" OnClick="Cancel">Hủy</MudButton>
        @if (isCodeConfirmed)
        {
            <MudButton Color="Color.Success" OnClick="ResetPassword">Đặt Lại Mật Khẩu</MudButton>
        }
        else if (isVerificationSent)
        {
            <MudButton Color="Color.Success" OnClick="ConfirmVerificationCode">Xác Nhận Mã</MudButton>
        }
        else
        {
            <MudButton Color="Color.Success" OnClick="SendVerificationCode">Gửi Mã Xác Nhận</MudButton>
        }
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter] MudDialogInstance MudDialog { get; set; }

    void Submit() => MudDialog.Close(DialogResult.Ok(true));
    void Cancel() => MudDialog.Cancel();
    [Inject] private IDialogService _dialogService { get; set; } = null!;
    private async void OnButtonClicked()
    {
        bool? result = await _dialogService.ShowMessageBox(
     "Xác nhận",
     "Bạn có chắc muốn xác nhận?",
     yesText: "Xác nhận", cancelText: "Hủy");
        if (result == true)
        {
            _snackbar.Add("xác nhận thành công!", Severity.Success);
            await Task.Delay(60);
            MudDialog.Close(DialogResult.Ok(true));
            StateHasChanged();
        }
        else
        {
            _snackbar.Add("Không thành công!", Severity.Error);
        }
    }
    private string userInput;
    private string verificationCode;
    private string newPassword;
    private string confirmPassword;
    private bool isVerificationSent = false;
    private bool isCodeConfirmed = false;

    private async Task SendVerificationCode()
    {
        if (!string.IsNullOrWhiteSpace(userInput))
        {
            // Logic to send verification code
            isVerificationSent = true;
            // e.g., await emailService.SendVerificationCode(userInput);
        }
        else
        {
            // Handle error: userInput is empty
        }
    }

    private async Task ConfirmVerificationCode()
    {
        if (!string.IsNullOrWhiteSpace(verificationCode))
        {
            // Logic to confirm the verification code
            // e.g., bool isValid = await verificationService.ValidateCode(userInput, verificationCode);
            isCodeConfirmed = true; // Set to true if the code is valid
        }
        else
        {
            // Handle error: verificationCode is empty
        }
    }

    private async Task ResetPassword()
    {
        if (newPassword == confirmPassword && !string.IsNullOrWhiteSpace(newPassword))
        {
            // Logic to reset the password
            // e.g., await userService.ResetPassword(userInput, newPassword);
        }
        else
        {
            // Handle error: passwords do not match or are empty
        }
    }
}
