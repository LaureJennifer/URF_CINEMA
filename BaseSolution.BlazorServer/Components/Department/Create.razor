@using System.Text.RegularExpressions
@using System.ComponentModel.DataAnnotations
@using BaseSolution.Application.DataTransferObjects.Customer
@using BaseSolution.Application.DataTransferObjects.Customer.Request
@using BaseSolution.Application.DataTransferObjects.Department
@using BaseSolution.Application.DataTransferObjects.Department.Request
@using BaseSolution.BlazorServer.Data.ValueObjects.Common
@using BaseSolution.BlazorServer.Repositories.Interfaces
@using BaseSolution.Domain.Entities
@using BaseSolution.Domain.Enums
@using BaseSolution.Infrastructure.Extensions
@using static MudBlazor.CategoryTypes

@inject IDialogService DialogService
@inject ISnackbar _snackbar
@inject NavigationManager _navigate;
@inject EntityStatusExtensions _entityStatusExtensions

<MudDialog>
    <DialogContent>
        <MudGrid>
            <MudItem xs="6" sm="6" md="6">
                <MudTextField @bind-Value="_departmentDto.Code" Placeholder="Mã rạp*" Required="true" ErrorText="@GetErrorText(_departmentDto.Code)" Validation="ValidateCode" />
            </MudItem>
            <MudItem xs="6" sm="6" md="6">
                <MudTextField @bind-Value="_departmentDto.Name" Placeholder="Tên rạp*" Required="true" ErrorText="@GetErrorText(_departmentDto.Name)" />
            </MudItem>
            <MudItem xs="6" sm="6" md="6">
                <MudTextField @bind-Value="_departmentDto.PhoneNumber" Placeholder="Số điện thoại*" Required="true" ErrorText="@GetErrorText(_departmentDto.PhoneNumber)" />
            </MudItem>
            <MudItem xs="6" sm="6" md="6">
                <MudTextField @bind-Value="_departmentDto.Email" Placeholder="Email*" Required="true" ErrorText="@GetErrorText(_departmentDto.Email)" />
            </MudItem>
            <MudItem xs="12" sm="12" md="12">
                <MudTextField @bind-Value="_departmentDto.Address" Placeholder="Địa chỉ*" Required="true" ErrorText="@GetErrorText(_departmentDto.Address)" />
            </MudItem>
            <MudItem xs="4" sm="4" md="4">
                <MudSelect T="EntityCountry" @bind-Value="selectedCountry" Label="Quốc gia*" Required="true" ErrorText="@GetErrorText(selectedCountry)">
                    @foreach (var country in Enum.GetValues(typeof(EntityCountry)).Cast<EntityCountry>())
                    {
                        <MudSelectItem T="EntityCountry" Value="country">@_entityStatusExtensions.ConvertForCountry(country)</MudSelectItem>
                    }
                </MudSelect>
            </MudItem>
            <MudItem xs="4" sm="4" md="4">
                <MudSelect T="EntityCity" @bind-Value="selectedCity" Label="Thành phố*" Required="true" ErrorText="@GetErrorText(selectedCity)" AdornmentColor="Color.Inherit" OnValueChanged="OnCityChanged">
                    @foreach (var city in GetCitiesInSelectedCountry())
                    {
                        <MudSelectItem T="EntityCity" Value="city">@_entityStatusExtensions.ConvertForCity(city)</MudSelectItem>
                    }
                </MudSelect>
            </MudItem>
            <MudItem xs="4" sm="4" md="4">
                <MudSelect T="EntityDistrict" @bind-Value="selectedDistrict" Label="Quận*" Required="true" ErrorText="@GetErrorText(selectedDistrict)">
                    @foreach (var district in GetDistrictsInSelectedCity())
                    {
                        <MudSelectItem T="EntityDistrict" Value="district">@_entityStatusExtensions.ConvertForDistrict(district)</MudSelectItem>
                    }
                </MudSelect>
            </MudItem>
        </MudGrid>
    </DialogContent>
    <DialogActions>
        <MudButton Color="Color.Error" OnClick="Cancel">Hủy</MudButton>
        <MudButton Color="Color.Primary" OnClick="OnButtonClicked">Thêm mới</MudButton>
    </DialogActions>
</MudDialog>

@code {
    private EntityCountry selectedCountry;
    private EntityCity selectedCity;
    private EntityDistrict selectedDistrict;

    private string GetErrorText<T>(T value) where T : Enum
    {
        if (EqualityComparer<T>.Default.Equals(value, default(T)))
        {
            return "Vui lòng chọn giá trị.";
        }

        return null;
    }

    private string ValidateCode(string value)
    {
        if (_lstDepartment.Any(d => d.Code == value))
        {
            return "Mã rạp đã tồn tại.";
        }

        return null;
    }

    private string GetErrorText(string value)
    {
        if (string.IsNullOrWhiteSpace(value))
        {
            return "Vui lòng nhập giá trị.";
        }

        // Kiểm tra các điều kiện khác (nếu cần)
        // Ví dụ: Kiểm tra định dạng email
        if (!ValidateEmail(value))
        {
            return "Email không hợp lệ.";
        }

        // Kiểm tra các điều kiện khác (nếu cần)
        // Ví dụ: Kiểm tra định dạng số điện thoại
        if (!ValidatePhoneNumber(value))
        {
            return "Số điện thoại không hợp lệ.";
        }

        // Chưa có lỗi, trả về null
        return null;
    }

    public static bool ValidatePhoneNumber(string phoneNumber)
    {
        string pattern = @"^\d{10}$";
        return Regex.IsMatch(phoneNumber, pattern);
    }

    public static bool ValidateEmail(string email)
    {
        string pattern = @"^[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,}$";
        return Regex.IsMatch(email, pattern);
    }

    private List<EntityCity> GetCitiesInSelectedCountry()
    {
        // Trả về danh sách thành phố dựa trên quốc gia được chọn
        switch (selectedCountry)
        {
            case EntityCountry.VN:
                return new List<EntityCity> { EntityCity.HN, EntityCity.HCM, EntityCity.DN, EntityCity.TH, EntityCity.BK, EntityCity.BN, EntityCity.QN, EntityCity.QB, EntityCity.BD, EntityCity.LC, EntityCity.SL, EntityCity.CB, EntityCity.HG };
            case EntityCountry.CN:
                return new List<EntityCity> { EntityCity.SH, EntityCity.SZ };
            case EntityCountry.US:
                return new List<EntityCity> { EntityCity.NY };
            case EntityCountry.CA:
                return new List<EntityCity> { EntityCity.VC };
            case EntityCountry.DE:
                return new List<EntityCity> { EntityCity.BL };
            case EntityCountry.SG:
                return new List<EntityCity> { EntityCity.SG };
            // Thêm các trường hợp cho các quốc gia khác
            default:
                return new List<EntityCity>();
        }
    }

    private List<EntityDistrict> GetDistrictsInSelectedCity()
    {
        // Trả về danh sách quận dựa trên thành phố được chọn
        switch (selectedCity)
        {
            case EntityCity.HN:
                return new List<EntityDistrict> { EntityDistrict.CG, EntityDistrict.NTL, EntityDistrict.HBT, EntityDistrict.BD };
            case EntityCity.HCM:
                return new List<EntityDistrict> { EntityDistrict.TP, EntityDistrict.BT };
            case EntityCity.DN:
                return new List<EntityDistrict> { EntityDistrict.CL, EntityDistrict.TK };
            case EntityCity.BD:
                return new List<EntityDistrict> { EntityDistrict.TU, EntityDistrict.TA };
            case EntityCity.NY:
                return new List<EntityDistrict> { EntityDistrict.MHT };
            case EntityCity.SG:
                return new List<EntityDistrict> { };
            // Thêm các trường hợp cho các thành phố khác
            default:
                return new List<EntityDistrict>();
        }
    }

    private void OnCountryChanged(EntityCountry country)
    {
        // Đặt lại thành phố và quận khi quốc gia thay đổi
        selectedCity = EntityCity.HN;
        selectedDistrict = EntityDistrict.TK;
    }

    private void OnCityChanged(EntityCity city)
    {
        // Đặt lại quận khi thành phố thay đổi
        selectedDistrict = EntityDistrict.TK;
    }

    [CascadingParameter] MudDialogInstance _mudDialog { get; set; }

    [Inject]
    public IDepartmentRepo _departmentRepo { get; set; }

    public DepartmentDto _departmentDto = new();
    private List<DepartmentDto> _lstDepartment { get; set; }

    public DepartmentCreateRequest obj = new();
    public ViewDepartmentWithPaginationRequest department_ = new();

    public string AddressCode { get; set; }
    public void SetAddressCode()
    {
        string countryCodeString = ((int)selectedCountry).ToString("D2");
        string cityCodeString = ((int)selectedCity).ToString("D2");
        string districtCodeString = ((int)selectedDistrict).ToString("D2");

        AddressCode = $"{countryCodeString}-{cityCodeString}-{districtCodeString}";
    }

    public string AddressCodeFormat = "01/10/2003";

    private async Task OnButtonClicked()
    {
        SetAddressCode();
        obj.Code = _departmentDto.Code;
        obj.Name = _departmentDto.Name;
        obj.AddressCode = AddressCode;
        obj.PhoneNumber = _departmentDto.PhoneNumber;
        obj.Email = _departmentDto.Email;
        obj.Address = _departmentDto.Address;
        obj.AddressCodeFormat = AddressCodeFormat;
        bool? confirm = await DialogService.ShowMessageBox(
     "Xác nhận",
     "Bạn có chắc thêm mới?",
     yesText: "Xác nhận", cancelText: "Hủy");
        if (confirm == true)
        {
            var result = await _departmentRepo.AddAsync(obj);
            if (result == true)
            {
                _mudDialog.Close(DialogResult.Ok(true));
                _snackbar.Add("Thêm thành công", Severity.Success);
                _navigate.NavigateTo("/department/list");
                StateHasChanged();
            }
            else
            {
                _snackbar.Add
                (
                    "Thêm thất bại",
                        Severity.Error
                );
            }
        }
    }
    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    private async Task LoadData()
    {

        var result = await _departmentRepo.GetAllActive(department_);
        if (result != null)
        {
            _lstDepartment = result.Data.Data.ToList();
            StateHasChanged();
        }

    }


    void Cancel() => _mudDialog.Cancel();
}
