@using System.Text.RegularExpressions
@using System.ComponentModel.DataAnnotations
@using BaseSolution.Application.DataTransferObjects.Customer
@using BaseSolution.Application.DataTransferObjects.Customer.Request
@using BaseSolution.Application.DataTransferObjects.Department
@using BaseSolution.Application.DataTransferObjects.Department.Request
@using BaseSolution.BlazorServer.Data.ValueObjects.Common
@using BaseSolution.BlazorServer.Repositories.Interfaces
@using BaseSolution.Domain.Entities
@using BaseSolution.Domain.Enums
@using static MudBlazor.CategoryTypes

@inject IDialogService DialogService
@inject ISnackbar _snackbar
@inject NavigationManager _navigate;

<MudDialog>
    <DialogContent>
        <MudGrid>
            <MudItem xs="6" sm="6" md="6">
                <MudTextField @bind-Value="_departmentDto.Code" Label="Mã khách hàng*" />
            </MudItem>
            <MudItem xs="6" sm="6" md="6">
                <MudTextField @bind-Value="_departmentDto.Name" Label="Họ và tên*" />
            </MudItem>
            <MudItem xs="6" sm="6" md="6">
                <MudTextField @bind-Value="_departmentDto.PhoneNumber" Label="Số điện thoại*" />
            </MudItem>
            <MudItem xs="6" sm="6" md="6">
                <MudTextField @bind-Value="_departmentDto.Email" Label="Email*" />
            </MudItem>
            <MudItem xs="6" sm="6" md="6">
                <MudTextField @bind-Value="_departmentDto.Address" Label="Địa chỉ*" />
            </MudItem>
            <MudItem xs="6" sm="6" md="6">
                <MudTextField @bind-Value="_departmentDto.AddressCode" Label="Tên tài khoản*" />
            </MudItem>
            <MudItem xs="6" sm="6" md="6">
                <MudTextField @bind-Value="_departmentDto.AddressCodeFormat" Label="Mật khẩu*" />
            </MudItem>
            <MudItem xs="6" sm="6" md="6">
                <MudSelect T="EntityStatus" AnchorOrigin="Origin.BottomCenter" @bind-Value="_departmentDto.Status" For="@(() => _departmentDto.Status)">
                    <MudSelectItem Value="EntityStatus.Active">Hoạt động</MudSelectItem>
                    <MudSelectItem Value="EntityStatus.InActive">Không hoạt động</MudSelectItem>
                    <MudSelectItem Value="EntityStatus.Pending">Chờ</MudSelectItem>
                    <MudSelectItem Value="EntityStatus.PendingForActivation">Chờ hoạt động</MudSelectItem>
                    <MudSelectItem Value="EntityStatus.PendingForConfirmation">Chờ kích hoạt</MudSelectItem>
                    <MudSelectItem Value="EntityStatus.PendingForApproval">Chờ chấp thuận</MudSelectItem>
                    <MudSelectItem Value="EntityStatus.Locked">Khóa</MudSelectItem>
                </MudSelect>
            </MudItem>
        </MudGrid>
    </DialogContent>
    <DialogActions>
        <MudButton Color="Color.Error" OnClick="Cancel">Hủy</MudButton>
        <MudButton Color="Color.Success" OnClick="OnButtonClicked">Thêm mới</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter] MudDialogInstance _mudDialog { get; set; }

    [Inject]
    public IDepartmentRepo _departmentRepo { get; set; }

    public DepartmentDto _departmentDto = new();
    private List<DepartmentDto> _lstDepartment { get; set; }

    public DepartmentCreateRequest obj = new();
    public ViewDepartmentWithPaginationRequest department_ = new();


    private async Task OnButtonClicked()
    {
        obj.Code = _departmentDto.Code;
        obj.Name = _departmentDto.Name;
        obj.AddressCode = _departmentDto.AddressCode;
        obj.PhoneNumber = _departmentDto.PhoneNumber;
        obj.Email = _departmentDto.Email;
        obj.Address = _departmentDto.Address;
        obj.AddressCodeFormat = _departmentDto.AddressCodeFormat;
        obj.Status= _departmentDto.Status;
        bool? confirm = await DialogService.ShowMessageBox(
     "Xác nhận",
     "Bạn có chắc thêm mới?",
     yesText: "Xác nhận", cancelText: "Hủy");
        if (confirm == true)
        {
            var result = await _departmentRepo.AddAsync(obj);
            if (result == true)
            {
                _mudDialog.Close(DialogResult.Ok(true));
                _snackbar.Add("Thêm thành công", Severity.Success);
                _navigate.NavigateTo("/department/list");
                StateHasChanged();
            }
            else
            {
                _snackbar.Add
                (
                    "Thêm thất bại",
                        Severity.Error
                );
            }
        }
    }
    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    private async Task LoadData()
    {

        var result = await _departmentRepo.GetAllActive(department_);
        if (result != null)
        {
            _lstDepartment = result.Data.Data.ToList();
        }
    }


    void Cancel() => _mudDialog.Cancel();
}
