@using System.Text.RegularExpressions
@using System.ComponentModel.DataAnnotations
@using BaseSolution.Application.DataTransferObjects.Department
@using BaseSolution.Application.DataTransferObjects.Department.Request
@using BaseSolution.BlazorServer.Repositories.Interfaces
@using BaseSolution.Domain.Entities
@using BaseSolution.Domain.Enums
@using BaseSolution.Infrastructure.Extensions
@using static MudBlazor.CategoryTypes

@inject IDialogService DialogService
@inject ISnackbar _snackbar
@inject NavigationManager _navigate;
@inject EntityStatusExtensions _entityStatusExtensions

<MudDialog>
    <DialogContent>
        <MudGrid>
            <MudItem xs="6" sm="6" md="6">
                <MudTextField @bind-Value="_departmentDto.Name" Placeholder="Tên rạp*" Required="true" ErrorText="@GetErrorText(_departmentDto.Name)" />
            </MudItem>
            <MudItem xs="6" sm="6" md="6">
                <MudTextField @bind-Value="_departmentDto.PhoneNumber" Placeholder="Số điện thoại*" Required="true" ErrorText="@GetErrorText(_departmentDto.PhoneNumber)" />
            </MudItem>
            <MudItem xs="6" sm="6" md="6">
                <MudTextField @bind-Value="_departmentDto.Email" Placeholder="Email*" Required="true" ErrorText="@GetErrorText(_departmentDto.Email)" />
            </MudItem>
            <MudItem xs="12" sm="12" md="12">
                <MudTextField @bind-Value="_departmentDto.Address" Placeholder="Địa chỉ*" Required="true" ErrorText="@GetErrorText(_departmentDto.Address)" />
            </MudItem>
            <MudItem xs="4" sm="4" md="4">
                <MudSelect T="string" @bind-Value="selectedCountry" Label="Quốc gia*">
                    @foreach (var country in _lstDepartment.Select(x => x.AddressCode).ToList())
                    {
                        <MudSelectItem T="string" Value="country">@ConvertForCountry(country.Substring(0, 2))</MudSelectItem>
                    }
                </MudSelect>
            </MudItem>
            <MudItem xs="4" sm="4" md="4">
                <MudSelect T="string" @bind-Value="selectedCity" Label="Thành phố*">
                    @foreach (var country in _lstDepartment.Select(x => x.AddressCode).ToList())
                    {
                        <MudSelectItem T="string" Value="country">@ConvertForCity(country.Substring(3, 2))</MudSelectItem>
                    }
                </MudSelect>
            </MudItem>
            <MudItem xs="4" sm="4" md="4">
                <MudSelect T="string" @bind-Value="selectedDistrict" Label="Quận*">
                    @foreach (var country in _lstDepartment.Select(x => x.AddressCode).ToList())
                    {
                        <MudSelectItem T="string" Value="country">@ConvertForDistrict(country.Substring(6, 2))</MudSelectItem>
                    }
                </MudSelect>
            </MudItem>
        </MudGrid>
    </DialogContent>
    <DialogActions>
        <MudButton Color="Color.Error" OnClick="Cancel">Hủy</MudButton>
        <MudButton Color="Color.Primary" OnClick="OnButtonClicked">Thêm mới</MudButton>
    </DialogActions>
</MudDialog>

@code {
    private string selectedCountry;
    private string selectedCity;
    private string selectedDistrict;

    [CascadingParameter] MudDialogInstance _mudDialog { get; set; }

    [Inject]
    public IDepartmentRepo _departmentRepo { get; set; }

    public DepartmentDto _departmentDto = new();
    private List<DepartmentDto> _lstDepartment { get; set; } = new();

    public DepartmentUpdateRequest obj = new();
    public ViewDepartmentWithPaginationRequest department_ = new();

    [Parameter]
    public Guid idDepartment { get; set; }

    public string AddressCodeFormat = "01/10/2003";

    private async Task OnButtonClicked()
    {
        obj.Id = _departmentDto.Id;
        obj.Code = _departmentDto.Code;
        obj.Name = _departmentDto.Name;
        obj.AddressCode = _departmentDto.AddressCode;
        obj.PhoneNumber = _departmentDto.PhoneNumber;
        obj.Email = _departmentDto.Email;
        obj.Address = _departmentDto.Address;
        obj.AddressCodeFormat = AddressCodeFormat;
        obj.Status = _departmentDto.Status;
        bool? confirm = await DialogService.ShowMessageBox(
     "Xác nhận",
     "Bạn có chắc sửa mới?",
     yesText: "Xác nhận", cancelText: "Hủy");
        if (confirm == true)
        {
            var result = await _departmentRepo.UpdateAsync(obj);
            if (result == true)
            {
                _mudDialog.Close(DialogResult.Ok(true));
                _snackbar.Add("Sửa thành công", Severity.Success);
                _navigate.NavigateTo("/department/list");
                StateHasChanged();
            }
            else
            {
                _snackbar.Add
                (
                    "Thêm thất bại",
                        Severity.Error
                );
            }
        }
    }
    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    private async Task LoadData()
    {

        var result = await _departmentRepo.GetByIdAsync(idDepartment);
        _departmentDto = result.Data!;
        var result1 = await _departmentRepo.GetAllActive(department_);
        _lstDepartment = result1.Data.Data.ToList();
    }

    public string GetAddressDetails(string addressCode)
    {
        string[] parts = addressCode.Split('-');
        try
        {
            if (parts.Length == 3)
            {
                string country = ConvertForCountry(parts[0]);
                string city = ConvertForCity(parts[1]);
                string district = ConvertForDistrict(parts[2]);

                return ($" quận {district} - thành phố {city} - quốc gia {country}");
            }
            else
            {
                return "Mã không hợp lệ";
            }
        }
        catch (Exception ex)
        {
            return "Lỗi" + ex.Message;
        }

    }

    private string GetErrorText<T>(T value) where T : Enum
    {
        if (EqualityComparer<T>.Default.Equals(value, default(T)))
        {
            return "Vui lòng chọn giá trị.";
        }

        return null;
    }

    private string GetErrorText(string value)
    {
        if (string.IsNullOrWhiteSpace(value))
        {
            return "Vui lòng nhập giá trị.";
        }

        if (!ValidateEmail(value))
        {
            return "Email không hợp lệ.";
        }

        if (!ValidatePhoneNumber(value))
        {
            return "Số điện thoại không hợp lệ.";
        }

        return null;
    }

    public static bool ValidatePhoneNumber(string phoneNumber)
    {
        string pattern = @"^\d{10}$";
        return Regex.IsMatch(phoneNumber, pattern);
    }

    public static bool ValidateEmail(string email)
    {
        string pattern = @"^[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,}$";
        return Regex.IsMatch(email, pattern);
    }

    private string ValidateCode(string value)
    {
        if (_lstDepartment.Any(d => d.Code == value))
        {
            return "Mã rạp đã tồn tại.";
        }

        return null;
    }

    public string ConvertForCountry(string status)
    {
        switch (status)
        {
            case "01":
                return "Việt Nam";
            case "03":
                return "Trung Quốc";
            case "02":
                return "Mỹ";
            case "04":
                return "Canada";
            case "05":
                return "Đức";
            case "06":
                return "Singapore";
        }

        return "N/A";
    }
    public string ConvertForDistrict(string status)
    {
        switch (status)
        {
            case "10":
                return "Thanh Khê";
            case "09":
                return "Cẩm Lệ";
            case "01":
                return "Ba Đình";
            case "03":
                return "Nam Từ Liêm";
            case "08":
                return "Tân Phú";
            case "02":
                return "Cầu Giấy";
            case "04":
                return "Hai Bà Trưng";
            case "06":
                return "Trường Ninh";
            case "05":
                return "Manhattan";
            case "11":
                return "Tân Uyên";
            case "12":
                return "Thuận An";
            case "07":
                return "Bình Tân";
        }
        return "N/A";
    }

    public string ConvertForCity(string status)
    {
        switch (status)
        {
            case "01":
                return "Hà Nội";
            case "13":
                return "NewYork";
            case "09":
                return "Quảng Bình";
            case "07":
                return "Bắc Ninh";
            case "10":
                return "Bình Dương";
            case "12":
                return "Thẩm Quyến";
            case "14":
                return "Vancouver";
            case "06":
                return "Tuyên Quang";
            case "03":
                return "Thanh Hóa";
            case "02":
                return "Hồ Chí Minh";
            case "04":
                return "Đà Nẵng";
            case "19":
                return "Hà Giang";
            case "08":
                return "Quảng Ngãi";
            case "05":
                return "Bắc Kạn";
            case "16":
                return "Lai Châu";
            case "17":
                return "Sơn La";
            case "11":
                return "Thượng Hải";
            case "15":
                return "Berlin";
            case "18":
                return "Cao Bằng";
        }
        return "N/A";
    }


    void Cancel() => _mudDialog.Cancel();
}
