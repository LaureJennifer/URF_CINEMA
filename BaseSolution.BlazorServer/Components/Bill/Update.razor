@using System.Text.RegularExpressions
@using System.ComponentModel.DataAnnotations
@using BaseSolution.Application.DataTransferObjects.Bill
@using BaseSolution.Application.DataTransferObjects.Bill.Request
@using BaseSolution.Application.DataTransferObjects.Customer
@using BaseSolution.BlazorServer.Repositories.Interfaces
@using BaseSolution.Domain.Entities
@using BaseSolution.Domain.Enums
@using static MudBlazor.CategoryTypes

@inject IDialogService DialogService
@inject ISnackbar _snackbar
@inject NavigationManager _navigate;

<MudDialog>
    <DialogContent>
        <MudGrid>
            <MudItem xs="6" sm="6" md="6">
                <MudSelect T="string" Label="Khách hàng" Class="mb-2"
                           AnchorOrigin="Origin.BottomCenter" @bind-Value="@customerId" For="@(() => customerId)">
                    @foreach (var item in _lstCustomer)
                    {
                        <MudSelectItem Value="@item.Id.ToString()">@item.Name</MudSelectItem>
                    }
                </MudSelect>
            </MudItem>
            <MudItem xs="6" sm="6" md="6">
                <MudTextField @bind-Value="_billDto.TotalPrice" Label="Tổng tiền*" />
            </MudItem>
            <MudItem xs="6" sm="6" md="6">
                <MudTextField @bind-Value="_billDto.TicketQuantity" Label="Tổng vé*" />
            </MudItem>
            <MudItem xs="6" sm="6" md="6">
                <MudDatePicker Label="Ngày tạo*" DateFormat="dd/MM/yyyy" @bind-Value="_billDto.CreatedTime" />
            </MudItem>
            <MudItem xs="6" sm="6" md="6">
                <MudTextField @bind-Value="_billDto.Description" Label="Mô tả*" />
            </MudItem>
            <MudItem xs="12" sm="6">
                <MudSelect T="EntityStatus" AnchorOrigin="Origin.BottomCenter" @bind-Value="_billDto.Status" For="@(() => _billDto.Status)">
                    <MudSelectItem Value="EntityStatus.Active">Hoạt động</MudSelectItem>
                    <MudSelectItem Value="EntityStatus.InActive">Không hoạt động</MudSelectItem>
                    <MudSelectItem Value="EntityStatus.Pending">Chờ</MudSelectItem>
                    <MudSelectItem Value="EntityStatus.PendingForActivation">Chờ hoạt động</MudSelectItem>
                    <MudSelectItem Value="EntityStatus.PendingForConfirmation">Chờ kích hoạt</MudSelectItem>
                    <MudSelectItem Value="EntityStatus.PendingForApproval">Chờ chấp thuận</MudSelectItem>
                    <MudSelectItem Value="EntityStatus.Locked">Khóa</MudSelectItem>
                </MudSelect>
            </MudItem>
        </MudGrid>
    </DialogContent>
    <DialogActions>
        <MudButton Color="Color.Error" OnClick="Cancel">Hủy</MudButton>
        <MudButton Color="Color.Success" OnClick="OnButtonClicked">Chỉnh sửa</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter] MudDialogInstance _mudDialog { get; set; }

    [Inject]
    public IBillRepo _billRepo { get; set; }

    public BillDto _billDto = new();
    public List<BillDto> _lstBill = new();
    List<CustomerDto> _lstCustomer = new();

    private string customerId;

    public BillUpdateRequest obj = new();
    public ViewBillWithPaginationRequest bill_ = new();
    [Parameter]
    public Guid idBill { get; set; }

    private async Task OnButtonClicked()
    {
        obj.CustomerId = Guid.Parse(customerId);
        obj.TicketQuantity = _billDto.TicketQuantity;
        obj.TotalPrice = _billDto.TotalPrice;
        obj.Description = _billDto.Description;
        obj.Status = _billDto.Status;
        bool? confirm = await DialogService.ShowMessageBox(
     "Xác nhận",
     "Bạn có chắc chỉnh sửa?",
     yesText: "Xác nhận", cancelText: "Hủy");
        if (confirm == true)
        {
            var result = await _billRepo.UpdateAsync(obj);
            if (result == true)
            {
                _mudDialog.Close(DialogResult.Ok(true));
                _snackbar.Add("Sửa thành công", Severity.Success);
                _navigate.NavigateTo("/bill/list");
                StateHasChanged();
            }
            else
            {
                _snackbar.Add
                (
                    "Sửa thất bại",
                        Severity.Error
                );
            }
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    private async Task LoadData()
    {

        var result = await _billRepo.GetAllActive(bill_);
        if (result != null)
        {
            _lstBill = result.Data.Data.ToList();
        }
    }


    void Cancel() => _mudDialog.Cancel();
}