@using System.Text.RegularExpressions
@using System.ComponentModel.DataAnnotations
@using BaseSolution.Application.DataTransferObjects.Role
@using BaseSolution.Application.DataTransferObjects.User;
@using BaseSolution.Application.DataTransferObjects.User.Request
@using BaseSolution.BlazorServer.Data.ValueObjects.Common
@using BaseSolution.BlazorServer.Repositories.Interfaces
@using BaseSolution.Domain.Enums
@using static MudBlazor.CategoryTypes
@inject IDialogService DialogService
@inject ISnackbar _snackbar
@inject NavigationManager _navigate;
<MudDialog>
    <DialogContent>
        <MudGrid>
            <MudItem xs="6" sm="6" md="6">
                <MudTextField @bind-Value="_userDto.Name" Placeholder="Họ và tên*" />
                @if (_showNameError)
                {
                    <div class="error-message">Họ và tên không được để trống.</div>
                }
            </MudItem>
            <MudItem xs="6" sm="6" md="6">
                <MudTextField @bind-Value="_userDto.PhoneNumber" Placeholder="Số điện thoại*" />
                @if (_showPhoneError)
                {
                    <div class="error-message">Số điện thoại không được để trống.</div>
                }
                else if (_showPhoneAError)
                {
                    <div class="error-message">Số điện thoại không đúng định dạng.</div>
                }
            </MudItem>
            <MudItem xs="6" sm="6" md="6">
                <MudTextField @bind-Value="_userDto.Email" Placeholder="Email*" />
                @if (_showMailError)
                {
                    <div class="error-message">Email không được để trống.</div>
                }
                else if (_showMailAError)
                {
                    <div class="error-message">Email không đúng định dạng.</div>
                }
            </MudItem>
            <MudItem xs="6" sm="6" md="6">
                <MudTextField @bind-Value="_userDto.PassWord" Placeholder="Mật khẩu*" />
                @if (_showPasswordError)
                {
                    <div class="error-message">Mật khẩu không được để trống.</div>
                }
            </MudItem>
            <MudItem xs="12" sm="6">
                @if (_lstRole != null)
                {
                    <MudSelect T="string" Placeholder="Chức vụ" AnchorOrigin="Origin.BottomCenter" @bind-Value="@_selectedRoleId" For="@(() => _selectedRoleId)" Class="mb-2">
                        @foreach (var item in _lstRole)
                        {
                            <MudSelectItem Value="@item.Id.ToString()">@item.Code</MudSelectItem>
                        }
                    </MudSelect>
                    @if (_showRoleError)
                    {
                        <div class="error-message">Chức vụ không được để trống.</div>
                    }
                }
            </MudItem>
            <MudItem xs="12" sm="6">
                <MudSelect Placeholder="Trạng thái*" T="EntityStatus" AnchorOrigin="Origin.BottomCenter" @bind-Value="_userDto.Status" For="@(() => _userDto.Status)">
                    <MudSelectItem Value="EntityStatus.Active">Hoạt động</MudSelectItem>
                    <MudSelectItem Value="EntityStatus.InActive">Không hoạt động</MudSelectItem>
                    <MudSelectItem Value="EntityStatus.Pending">Chờ</MudSelectItem>
                    <MudSelectItem Value="EntityStatus.PendingForActivation">Chờ hoạt động</MudSelectItem>
                    <MudSelectItem Value="EntityStatus.PendingForConfirmation">Chờ kích hoạt</MudSelectItem>
                    <MudSelectItem Value="EntityStatus.PendingForApproval">Chờ chấp thuận</MudSelectItem>
                    <MudSelectItem Value="EntityStatus.Locked">Khóa</MudSelectItem>
                </MudSelect>
            </MudItem>
        </MudGrid>
        <MudGrid Class="mt-3">
            <MudItem xs="6" sm="6" md="6">
                <MudFileUpload T="IBrowserFile" FilesChanged="UploadFiles">
                    <ButtonTemplate>
                        <MudButton HtmlTag="label" Variant="MudBlazor.Variant.Filled" Color="Color.Primary" StartIcon="@Icons.Material.Filled.CloudUpload" for="@context">Ảnh</MudButton>
                    </ButtonTemplate>
                </MudFileUpload>
            </MudItem>
            @if (imageUrl != null)
            {
                <MudItem xs="6" sm="6" md="6">
                    <MudImage Style="width:60%;" Src="@imageUrl" />
                </MudItem>
            }
        </MudGrid>
    </DialogContent>
    <DialogActions>
        <MudButton Color="Color.Error" OnClick="Cancel">Hủy</MudButton>
        <MudButton Color="Color.Primary" @bind-value="_isValid" OnClick="OnButtonClicked">Chỉnh sửa</MudButton>
    </DialogActions>
</MudDialog>
@code {

    [CascadingParameter] MudDialogInstance _mudDialog { get; set; }

    [Inject]
    public IUserRepo _userRepo { get; set; }
    [Inject]
    public IRoleRepo _roleRespo { get; set; }

    public UserDto _userDto = new();
    List<RoleDto> _lstRole = new();

    public UserUpdateRequest obj = new();
    public ViewUserWithPaginationRequest user_ = new();

    public string imageUrl { get; set; } = "";
    private string _selectedRoleId;
    [Parameter]
    public Guid idUser { set; get; }

    public bool _isValid = false;

    private bool _showCodeError = false;
    private bool _showNameError = false;
    private bool _showPhoneError = false;
    private bool _showMailError = false;
    private bool _showUserNameError = false;
    private bool _showPasswordError = false;
    private bool _showRoleError = false;
    private bool _showPhoneAError = false;
    private bool _showMailAError = false;


    IList<IBrowserFile> files = new List<IBrowserFile>();
    ImageHandle imageHandle = new();

    private async Task UploadFiles(IBrowserFile file)
    {
        imageUrl = @"\image\User\" + await imageHandle.AddImage(file, "User");
        files.Add(file);
    }

    private async Task OnButtonClicked()
    {
        int countError = 0;
        // Kiểm tra và hiển thị lỗi validate
        if (string.IsNullOrEmpty(_userDto.Name)) { countError++; _showNameError = true; } else { _showNameError = false; }
        if (string.IsNullOrEmpty(_userDto.PhoneNumber)) { countError++; _showPhoneError = true; } else { _showPhoneError = false; }
        if (string.IsNullOrEmpty(_userDto.Email)) { countError++; _showMailError = true; } else { _showMailError = false; }
        if (string.IsNullOrEmpty(_userDto.PassWord)) { countError++; _showPasswordError = true; } else { _showPasswordError = false; }
        if (string.IsNullOrEmpty(_selectedRoleId)) { countError++; _showRoleError = true; } else { _showRoleError = false; }
        if (IsValidPhoneNumber(_userDto.PhoneNumber) == false) { countError++; _showPhoneAError = true; } else { _showPhoneAError = false; }
        if (IsValidEmail(_userDto.Email) == false) { countError++; _showMailAError = true; } else { _showMailAError = false; }
        if (countError > 0)
        {

            _snackbar.Add("Bạn đã nhập lỗi");
        }
        else
        {
            obj.Id = _userDto.Id;
            obj.Name = _userDto.Name;
            obj.PhoneNumber = _userDto.PhoneNumber;
            obj.Email = _userDto.Email;
            obj.PassWord = _userDto.PassWord;
            obj.UrlImage = imageUrl;
            obj.Status = _userDto.Status;
            obj.RoleId = Guid.Parse(_selectedRoleId);
            bool? confirm = await DialogService.ShowMessageBox(
         "Xác nhận",
         "Bạn có chắc chắn sửa?",
         yesText: "Xác nhận", cancelText: "Hủy");
            if (confirm == true)
            {
                if (_selectedRoleId == null)
                {
                    _snackbar.Add
                    (
                        "Chưa chọn chức vụ",
                         Severity.Error
                    );
                }
                else
                {
                    obj.RoleId = Guid.Parse(_selectedRoleId);
                    var result = await _userRepo.UpdateAsync(obj);
                    if (result == true)
                    {
                        await Task.Delay(1000);
                        _mudDialog.Close(DialogResult.Ok(true));
                        _snackbar.Add("Sửa thành công", Severity.Success);
                        _navigate.NavigateTo("/user/list");
                        StateHasChanged();
                    }
                    else
                    {
                        _snackbar.Add
                        (
                            "Sửa thất bại",
                             Severity.Error
                        );
                    }
                }

            }
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    private async Task LoadData()
    {

        var result = await _userRepo.GetByIdAsync(idUser);
        _userDto = result.Data!;
        var result1 = await _roleRespo.GetAllActive();
        _lstRole = result1.Data.Data.ToList();
        StateHasChanged();
    }

    void Cancel() => _mudDialog.Cancel();

    public static bool IsValidEmail(string email)
    {
        if (email == null)
        {
            return false;
        }
        string pattern = @"^[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,}$";
        return Regex.IsMatch(email, pattern);
    }

    public static bool IsValidPhoneNumber(string phoneNumber)
    {
        if (phoneNumber == null)
        {
            return false;
        }
        string pattern = @"^0\d{9}$"; // Giả sử số điện thoại có 10 chữ số
        return Regex.IsMatch(phoneNumber, pattern);
    }

}
