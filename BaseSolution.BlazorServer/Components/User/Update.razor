@using System.Text.RegularExpressions
@using System.ComponentModel.DataAnnotations
@using BaseSolution.Application.DataTransferObjects.Role
@using BaseSolution.Application.DataTransferObjects.User;
@using BaseSolution.Application.DataTransferObjects.User.Request
@using BaseSolution.BlazorServer.Data.ValueObjects.Common
@using BaseSolution.BlazorServer.Repositories.Interfaces
@using BaseSolution.Domain.Enums
@using static MudBlazor.CategoryTypes
@inject IDialogService DialogService
@inject ISnackbar _snackbar
@inject NavigationManager _navigate;
<MudDialog>
    <DialogContent>
        <MudGrid>
            <MudItem xs="6" sm="6" md="6">
                <MudTextField @bind-Value="_userDto.Name" Label="Họ và tên*" />
            </MudItem>
            <MudItem xs="6" sm="6" md="6">
                <MudTextField @bind-Value="_userDto.PhoneNumber" Label="Số điện thoại*" />
            </MudItem>
            <MudItem xs="6" sm="6" md="6">
                <MudTextField @bind-Value="_userDto.Email" Label="Email*" />
            </MudItem>
            <MudItem xs="6" sm="6" md="6">
                <MudTextField @bind-Value="_userDto.PassWord" Label="Mật khẩu*" />
            </MudItem>
            <MudItem xs="12" sm="6">
                @if(_lstRole != null)
                {
                    <MudSelect T="string" Label="Chức vụ" AnchorOrigin="Origin.BottomCenter" @bind-Value="@_selectedRoleId" For="@(() => _selectedRoleId)" Class="mb-2">
                        @foreach (var item in _lstRole)
                        {
                            <MudSelectItem Value="@item.Id.ToString()">@item.Code</MudSelectItem>
                        }
                    </MudSelect>
                }  
            </MudItem>
            <MudItem xs="12" sm="6">
                <MudSelect T="EntityStatus" AnchorOrigin="Origin.BottomCenter" @bind-Value="_userDto.Status" For="@(() => _userDto.Status)">
                    <MudSelectItem Value="EntityStatus.Active">Hoạt động</MudSelectItem>
                    <MudSelectItem Value="EntityStatus.InActive">Không hoạt động</MudSelectItem>
                    <MudSelectItem Value="EntityStatus.Pending">Chờ</MudSelectItem>
                    <MudSelectItem Value="EntityStatus.PendingForActivation">Chờ hoạt động</MudSelectItem>
                    <MudSelectItem Value="EntityStatus.PendingForConfirmation">Chờ kích hoạt</MudSelectItem>
                    <MudSelectItem Value="EntityStatus.PendingForApproval">Chờ chấp thuận</MudSelectItem>
                    <MudSelectItem Value="EntityStatus.Locked">Khóa</MudSelectItem>
                </MudSelect>
            </MudItem>
        </MudGrid>
        <MudGrid Class="mt-3">
            <MudItem xs="6" sm="6" md="6">
                <MudFileUpload T="IBrowserFile" FilesChanged="UploadFiles">
                    <ButtonTemplate>
                        <MudButton HtmlTag="label" Variant="Variant.Filled" Color="Color.Primary" StartIcon="@Icons.Material.Filled.CloudUpload" for="@context">Ảnh</MudButton>
                    </ButtonTemplate>
                </MudFileUpload>
            </MudItem>
            @if (imageUrl != null)
            {
                <MudItem xs="6" sm="6" md="6">
                    <MudImage Style="width:60%;" Src="@imageUrl" />
                </MudItem>
            }
        </MudGrid>
    </DialogContent>
    <DialogActions>
        <MudButton Color="Color.Error" OnClick="Cancel">Hủy</MudButton>
        <MudButton Color="Color.Success" OnClick="OnButtonClicked">Chỉnh sửa</MudButton>
    </DialogActions>
</MudDialog>
@code {

    [CascadingParameter] MudDialogInstance _mudDialog { get; set; }

    [Inject]
    public IUserRepo _userRepo { get; set; }
    [Inject]
    public IRoleRepo _roleRespo { get; set; }

    public UserDto _userDto = new();
    List<RoleDto> _lstRole = new();

    public UserUpdateRequest obj = new();
    public ViewUserWithPaginationRequest user_ = new();

    public string imageUrl { get; set; } = "";
    private string _selectedRoleId;
    [Parameter]
    public Guid idUser { set; get; }

    IList<IBrowserFile> files = new List<IBrowserFile>();
    ImageHandle imageHandle = new();

    private async Task UploadFiles(IBrowserFile file)
    {
        imageUrl = @"\image\User\" + await imageHandle.AddImage(file, "User");
        files.Add(file);
    }

    private async Task OnButtonClicked()
    {
        obj.Id = _userDto.Id;
        obj.Name = _userDto.Name;
        obj.PhoneNumber = _userDto.PhoneNumber;
        obj.Email = _userDto.Email;
        obj.PassWord = _userDto.PassWord;
        obj.UrlImage = imageUrl;
        obj.Status = _userDto.Status;
        obj.RoleId = _userDto.RoleId;
        bool? confirm = await DialogService.ShowMessageBox(
     "Xác nhận",
     "Bạn có chắc chắn sửa?",
     yesText: "Xác nhận", cancelText: "Hủy");
        if (confirm == true)
        {
            if (_selectedRoleId == null)
            {
                _snackbar.Add
                (
                    "Chưa chọn chức vụ",
                     Severity.Error
                );
            }
            else
            {
                obj.RoleId = Guid.Parse(_selectedRoleId);
                var result = await _userRepo.UpdateAsync(obj);
                if (result == true)
                {
                    await Task.Delay(1000);
                    _mudDialog.Close(DialogResult.Ok(true));
                    _snackbar.Add("Sửa thành công", Severity.Success);
                    _navigate.NavigateTo("/user/list");
                    StateHasChanged();
                }
                else
                {
                    _snackbar.Add
                    (
                        "Sửa thất bại",
                         Severity.Error
                    );
                }
            }
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    private async Task LoadData()
    {

        var result = await _userRepo.GetByIdAsync(IdUser);
        _userDto = result.Data!;
        var result1 = await _roleRespo.GetAllActive();
        _lstRole = result1.Data.Data.ToList();
    }

    void Cancel() => _mudDialog.Cancel();
}
