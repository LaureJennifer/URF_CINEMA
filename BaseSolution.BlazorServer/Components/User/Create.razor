@using System.Text.RegularExpressions
@using System.ComponentModel.DataAnnotations
@using BaseSolution.Application.DataTransferObjects.Role
@using BaseSolution.Application.DataTransferObjects.User;
@using BaseSolution.Application.DataTransferObjects.User.Request
@using BaseSolution.BlazorServer.Repositories.Interfaces
@using BaseSolution.Domain.Entities
@using BaseSolution.Domain.Enums
@using static MudBlazor.CategoryTypes
@inject IDialogService DialogService
@inject ISnackbar _snackbar
<MudDialog>
    <DialogContent>
        <MudGrid>
            <MudItem xs="6" sm="6" md="6">
                <MudTextField @bind-Value="_userDto.Code" Label="Mã nhân viên*" />
            </MudItem>
            <MudItem xs="6" sm="6" md="6">
                <MudTextField @bind-Value="_userDto.Name" Label="Họ và tên*" />
            </MudItem>
            <MudItem xs="6" sm="6" md="6">
                <MudTextField @bind-Value="_userDto.PhoneNumber" Label="Số điện thoại*" />
            </MudItem>
            <MudItem xs="6" sm="6" md="6">
                <MudTextField @bind-Value="_userDto.Email" Label="Email*" />
            </MudItem>
            <MudItem xs="6" sm="6" md="6">
                <MudTextField @bind-Value="_userDto.UserName" Label="Tên tài khoản*" />
            </MudItem>
            <MudItem xs="6" sm="6" md="6">
                <MudTextField @bind-Value="_userDto.PassWord" Label="Mật khẩu*" />
            </MudItem>
            <MudItem xs="12" sm="6">
                <MudSelect T="string" Label="Chức vụ" AnchorOrigin="Origin.BottomCenter" @bind-Value="@_selectedRoleId" For="@(() => _selectedRoleId)" Class="mb-2">
                    @foreach (var item in _lstRole)
                    {
                        <MudSelectItem Value="@item.Id.ToString()">@item.Code</MudSelectItem>
                    }
                </MudSelect>
            </MudItem>
        </MudGrid>
        <MudGrid Class="mt-3">
            <MudItem xs="6" sm="6" md="6">
                <MudFileUpload T="IBrowserFile" FilesChanged="UploadFiles">
                    <ButtonTemplate>
                        <MudButton HtmlTag="label"
                                   Variant="Variant.Filled"
                                   Color="Color.Primary"
                                   StartIcon="@Icons.Material.Filled.CloudUpload"
                                   for="@context">
                            Ảnh
                        </MudButton>
                    </ButtonTemplate>
                </MudFileUpload>
            </MudItem>
            @if(files !=null)
            {
                <MudItem xs="6" sm="6" md="6">
                    <MudImage Src="@imageUrl" />
                </MudItem>
            }
        </MudGrid>
    </DialogContent>
    <DialogActions>
        <MudButton Color="Color.Error" OnClick="Cancel">Hủy</MudButton>
        <MudButton Color="Color.Success" OnClick="OnButtonClicked">Thêm mới</MudButton>
    </DialogActions>
</MudDialog>
@code {
    [CascadingParameter] MudDialogInstance _mudDialog { get; set; }
    [Inject]
    public IUserRepositories _userRepo { get; set; }
    [Inject]
    public IRoleRespositories _roleRespo { get; set; }
    public UserDto _userDto = new();
    private List<UserDto> _lstUser { get; set; }
    private List<RoleDto> _lstRole;
    public UserCreateRequest obj = new();
    public string imageUrl { get; set; }
    private string _selectedRoleId;
    void Cancel() => _mudDialog.Cancel();
    IList<IBrowserFile> files = new List<IBrowserFile>();
    public ViewUserWithPaginationRequest user_ = new();
    private async Task UploadFiles(IBrowserFile file)
    {
        files.Add(file);
    }
    private async void OnButtonClicked()
    {
        obj.Code = _userDto.Code;
        obj.Name = _userDto.Name;
        obj.PhoneNumber = _userDto.PhoneNumber;
        obj.Email = _userDto.Email;
        obj.UserName = _userDto.UserName;
        obj.PassWord = _userDto.PassWord;
        obj.UrlImage = imageUrl;
        // obj.Role = _user.Role;
        bool? confirm = await DialogService.ShowMessageBox(
     "Xác nhận",
     "Bạn có chắc thêm mới?",
     yesText: "Xác nhận", cancelText: "Hủy");
        if (confirm == true)
        {
            if (_lstUser.Any(x => x.UserName.ToLower().Trim().Equals(obj.UserName.Trim().ToLower())))
            {
                _snackbar.Add
                (
                    "Thêm thất bại do trùng tên tài khoản người dùng",
                     Severity.Error
                );
            }
            else if (obj.Role == null)
            {
                _snackbar.Add
                (
                    "Chưa chọn chức vụ",
                     Severity.Error
                );
            }
            else
            {
                obj.RoleId = Guid.Parse(_selectedRoleId);
                var result = await _userRepo.AddAsync(obj);
                if (confirm == true && result !=null)
                {
                    _snackbar.Add("Thêm mới người dùng thành công!", Severity.Success);
                }
                else _snackbar.Add("Thêm mới người dùng thất bại!" + Severity.Error);
                await Task.Delay(1500);
                _mudDialog.Close(DialogResult.Ok(true));
                StateHasChanged();
                await LoadData();
            }
        }
    }
    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }
    private async Task LoadData()
    {

        var result = await _userRepo.GetAllActive(user_);
        if(result != null)
        {
            _lstUser = result.Data.Data.ToList();
        }
        var result1 = await 
    }
}

