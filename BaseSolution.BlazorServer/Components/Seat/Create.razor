@using System.Text.RegularExpressions
@using System.ComponentModel.DataAnnotations
@using BaseSolution.Application.DataTransferObjects.RoomLayout
@using BaseSolution.Application.DataTransferObjects.Seat
@using BaseSolution.Application.DataTransferObjects.Seat.Request
@using BaseSolution.BlazorServer.Data.ValueObjects.Common
@using BaseSolution.BlazorServer.Repositories.Interfaces
@using BaseSolution.Domain.Enums
@using MudBlazor
@using static MudBlazor.CategoryTypes

@inject IDialogService DialogService
@inject ISnackbar _snackbar
@inject NavigationManager _navigate;

<MudDialog>
    <DialogContent>
        <MudGrid>
            <MudItem xs="6" sm="6" md="6">
                <MudSelect T="string" Label="Tên bố cục phòng*" Class="mb-2"
                           AnchorOrigin="Origin.BottomCenter" @bind-Value="@_roomLayoutId" For="@(() => _roomLayoutId)">
                    @foreach (var item in _lstRoomLayout)
                    {
                        <MudSelectItem Value="@item.Id.ToString()">@item.Name</MudSelectItem>
                    }
                </MudSelect>
            </MudItem>
            <MudItem xs="6" sm="6" md="6">
                <MudTextField @bind-Value="_seatDto.Code" Label="Mã ghế*" />
            </MudItem>
            <MudItem xs="6" sm="6" md="6">
                <MudTextField @bind-Value="_seatDto.Row" Label="Vị trí*" />
            </MudItem>
            <MudItem xs="6" sm="6" md="6">
                <MudTextField @bind-Value="_seatDto.Type" Label="Loại*" />
            </MudItem>
            <MudItem xs="6" sm="6" md="6">
                <MudTextField @bind-Value="_seatDto.Price" Label="Giá*" />
            </MudItem>
            <MudItem xs="12" sm="6">
                <MudSelect T="EntityStatus" AnchorOrigin="Origin.BottomCenter" @bind-Value="_seatDto.Status" For="@(() => _seatDto.Status)">
                    <MudSelectItem Value="EntityStatus.Active">Hoạt động</MudSelectItem>
                    <MudSelectItem Value="EntityStatus.InActive">Không hoạt động</MudSelectItem>
                    <MudSelectItem Value="EntityStatus.Pending">Chờ</MudSelectItem>
                    <MudSelectItem Value="EntityStatus.PendingForActivation">Chờ hoạt động</MudSelectItem>
                    <MudSelectItem Value="EntityStatus.PendingForConfirmation">Chờ kích hoạt</MudSelectItem>
                    <MudSelectItem Value="EntityStatus.PendingForApproval">Chờ chấp thuận</MudSelectItem>
                    <MudSelectItem Value="EntityStatus.Locked">Khóa</MudSelectItem>
                </MudSelect>
            </MudItem>
        </MudGrid>
    </DialogContent>
    <DialogActions>
        <MudButton Color="Color.Error" OnClick="Cancel">Hủy</MudButton>
        <MudButton Color="Color.Success" OnClick="OnButtonClicked">Thêm mới</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter] MudDialogInstance _mudDialog { get; set; }

    [Inject]
    public ISeatRepo _seatRepo { get; set; }
    [Inject]
    public IRoomLayoutRepo _roomLayoutRepo { get; set; }

    public SeatDto _seatDto = new();
    public List<SeatDto> _lstSeat = new();
    public List<RoomLayoutDto> _lstRoomLayout = new();

    public string _roomLayoutId{ get; set; }

    public SeatCreateRequest obj = new();
    public ViewSeatWithPaginationRequest seat_ = new();

    private async Task OnButtonClicked()
    {
        obj.RoomLayoutId = _seatDto.RoomLayoutId;
        obj.Code = _seatDto.Code;
        obj.Row = _seatDto.Row;
        obj.SeatColumn = _seatDto.SeatColumn;
        obj.Type = _seatDto.Type;
        obj.Price = _seatDto.Price;
        obj.Status = _seatDto.Status;
        bool? confirm = await DialogService.ShowMessageBox(
     "Xác nhận",
     "Bạn có chắc thêm mới?",
     yesText: "Xác nhận", cancelText: "Hủy");
        if (confirm == true)
        {
            obj.RoomLayoutId = Guid.Parse(_roomLayoutId);
            var result = await _seatRepo.AddAsync(obj);
            if (result == true)
            {
                _mudDialog.Close(DialogResult.Ok(true));
                _snackbar.Add("Thêm thành công", Severity.Success);
                _navigate.NavigateTo("/seat/list");
                StateHasChanged();
            }
            else
            {
                _snackbar.Add
                (
                    "Thêm thất bại",
                        Severity.Error
                );
            }
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    private async Task LoadData()
    {

        var result = await _seatRepo.GetAllActive(seat_);
        if (result != null)
        {
            _lstSeat = result.Data.Data.ToList();
        }
        var result1 = await _roomLayoutRepo.GetAllActive();
        _lstRoomLayout = result1.Data.Data.ToList();
    }


    void Cancel() => _mudDialog.Cancel();
}