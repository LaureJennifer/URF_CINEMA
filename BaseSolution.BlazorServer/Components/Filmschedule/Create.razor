@using System.Text.RegularExpressions
@using System.ComponentModel.DataAnnotations
@using BaseSolution.Application.DataTransferObjects.Film
@using BaseSolution.Application.DataTransferObjects.FilmDetail
@using BaseSolution.Application.DataTransferObjects.FilmDetail.Request
@using BaseSolution.Application.DataTransferObjects.FilmSchedule.Request
@using BaseSolution.Application.DataTransferObjects.FilmScheduleRoom.Request
@using BaseSolution.Application.DataTransferObjects.Room
@using BaseSolution.Application.DataTransferObjects.Room.Request
@using BaseSolution.BlazorServer.Repositories.Interfaces
@using BaseSolution.Domain.Entities
@using BaseSolution.Domain.Enums
@using static MudBlazor.CategoryTypes
@inject IDialogService DialogService
@inject ISnackbar _snackbar
@inject NavigationManager _navigate;
@if (_film != null)
{
    <MudDialog>
    <DialogContent>
        <MudGrid>
            
            <MudItem xs="12" sm="12" md="12">
                    <MudTextField @bind-Value="@_film.Title"></MudTextField>
            </MudItem>
            <MudItem xs="6" sm="6" md="6">
                    <MudDatePicker @bind-Date="@_showDate" Label="Ngày chiếu*" DateFormat="dd.MM.yyyy" />
            </MudItem>
            <MudItem xs="6" sm="6" md="6">
                    <MudTimePicker AmPm="true" @bind-Time="_showTime" />

                </MudItem>
                <MudItem xs="12" sm="12" md="12">
                    <MudGrid>
                        @foreach (var room in _lstRoomByDepartment)
                        {
                            <MudCheckBox T="bool" CheckedChanged="@((e) => HandleCheckBoxCheckedChanged(room.Id, e))">@room.Code</MudCheckBox>
                        }
                    </MudGrid>
                </MudItem>
        </MudGrid>  
    </DialogContent>
    <DialogActions>
        <MudButton Color="Color.Error" OnClick="Cancel">Hủy</MudButton>
        <MudButton Color="Color.Primary" OnClick="OnButtonClicked">Thêm mới</MudButton>
    </DialogActions>
</MudDialog>
}

@code {

    private List<Guid> _lstSelectedRoomId = new List<Guid>();
    [Inject] IFilmScheduleRoomRepo _filmScheduleRoomRepo { get; set; }
    [Inject] IDialogService _dialogService { get; set; } = null!;
    [Inject] IFilmDetailRepo _filmDetailRepo { get; set; }
    [Inject] IFilmRepo _filmRepo { get; set; }
    [Inject] IFilmScheduleRepo _filmScheduleRepo { get; set; }
    FilmDto? _film { get; set; } = new();
    [CascadingParameter] MudDialogInstance MudDialog { get; set; }
    public FilmDetailDto filmDetail = new();
    [Inject] public IRoomRepo _roomRepo { get; set; }
    List<RoomDto> _lstRoomByDepartment { get; set; } = new();
    [Parameter] public Guid idDepartment { get; set; }
    [Parameter] public Guid idFilm { set; get; }
    MudForm from;
    bool checkBox { get; set; } = false;
    ViewRoomWithPaginationRequest _viewRoomWithPaginationRequest = new();
    ViewFilmScheduleWithPaginationRequest _viewFilmScheduleWithPaginationRequest = new(){PageSize=int.MaxValue-1};
    DateTime? _showDate { get; set; }
    TimeSpan? _showTime { get; set; } = new TimeSpan(00, 45, 00);
    MudTimePicker _timePicker;
    FilmDetailCreateRequest _filmDetailCreateRequest = new();
    void Submit() => MudDialog.Close(DialogResult.Ok(true));
    void Cancel() => MudDialog.Cancel();
    FilmScheduleCreateRequest _filmScheduleCreateRequest = new();
    Guid filmScheduleId { get; set; }
    [Inject] private IDialogService dialogService { get; set; }
    bool checkResultCreateAll { get; set; } = false;

    protected override async Task OnInitializedAsync()
    {

        await LoadFilmById(idFilm.ToString());
        await LoadRoomByDepartment(idDepartment.ToString());
    }

    private async void OnButtonClicked()
    {

        bool? rs = await _dialogService.ShowMessageBox(
     "Xác nhận",
     "Bạn có chắc chắn thêm mới?",
     yesText: "Xác nhận", cancelText: "Hủy");
        if (rs == true)
        {
            await CreateFilmSchedule();
            if (checkResultCreateAll)
            {
                _snackbar.Add("Thêm mới lịch chiếu thành công!", Severity.Success);
                await Task.Delay(60);
                MudDialog.Close(DialogResult.Ok(true));
                StateHasChanged();
                _navigate.NavigateTo("/filmschedule/list",forceLoad:true);
            }
            else
            {
                _snackbar.Add("Thêm mới lịch chiếu thất bại!", Severity.Error);
            }

        }

    }

    private void HandleCheckBoxCheckedChanged(Guid roomId, bool isChecked)
    {
        if (isChecked)
        {
            if (!_lstSelectedRoomId.Contains(roomId))
            {
                _lstSelectedRoomId.Add(roomId);
            }
        }
        else
        {
            _lstSelectedRoomId.Remove(roomId);
        }
    }

    async Task CreateFilmSchedule()
    {
        DateTimeOffset showDate = new DateTimeOffset((DateTime)_showDate!, TimeSpan.Zero);
        showDate = showDate.Add((TimeSpan)_showTime!);
        _filmScheduleCreateRequest.ShowDate = showDate;
        _filmScheduleCreateRequest.ShowTime = showDate;
        var result = await _filmScheduleRepo.AddAsync(_filmScheduleCreateRequest);
        if (result)
        {
            checkResultCreateAll = true;
            await CreateFilmDetail();
        }
        else
            checkResultCreateAll = false;
    }

    async Task CreateFilmDetail()
    {
        //Get FilmScheduleId
        _viewFilmScheduleWithPaginationRequest.ShowDate = _filmScheduleCreateRequest.ShowDate;
        _viewFilmScheduleWithPaginationRequest.ShowTime = _filmScheduleCreateRequest.ShowTime;
        var result = await _filmScheduleRepo.GetByShowDateTime(_viewFilmScheduleWithPaginationRequest);
        filmScheduleId = result.Data!.Data!.First().Id;

        _filmDetailCreateRequest.FilmId = idFilm;
        _filmDetailCreateRequest.FilmScheduleId = filmScheduleId;
        var createResult = await _filmDetailRepo.AddAsync(_filmDetailCreateRequest);
        if (createResult)
        {
            checkResultCreateAll = true;
            if (_lstSelectedRoomId.Count > 0)
            {
                await CreateRangeFilmScheduleRoom();
            }           
        }
        else 
            checkResultCreateAll = false;

    }
    List<FilmScheduleRoomCreateRangeRequest> _lstFilmScheduleRoomCreateRangeRequests = new();
    async Task CreateRangeFilmScheduleRoom()
    {
        foreach (var roomId in _lstSelectedRoomId)
        {
            FilmScheduleRoomCreateRangeRequest filmScheduleRoomCreateRangeRequest = new()
                {
                    FilmScheduleId = filmScheduleId,
                    RoomId = roomId
                };
            _lstFilmScheduleRoomCreateRangeRequests.Add(filmScheduleRoomCreateRangeRequest);
        }

        var result = await _filmScheduleRoomRepo.AddRangeAsync(_lstFilmScheduleRoomCreateRangeRequests);
        if (result)
        {
            checkResultCreateAll = true;
        }
        else
            checkResultCreateAll = false;

    }
    async Task LoadFilmById(string idFilm)
    {
        var result =await _filmRepo.GetByIdAsync(Guid.Parse(idFilm));
        _film = result.Data;
    }
    private async Task LoadRoomByDepartment(string idDepartment)
    {
        _viewRoomWithPaginationRequest.PageSize = 50;
        _viewRoomWithPaginationRequest.DepartmentId = Guid.Parse(idDepartment);
        var result = await _roomRepo.GetRoomByDepartment(_viewRoomWithPaginationRequest);
        _lstRoomByDepartment = result.Data.Data.ToList();        
    }
    

}



