@using BaseSolution.Application.DataTransferObjects.Account
@using BaseSolution.Application.DataTransferObjects.Customer
@using BaseSolution.Application.DataTransferObjects.Customer.Request
@using BaseSolution.BlazorServer.Data.ValueObjects.Common
@using BaseSolution.BlazorServer.Repositories.Interfaces
@using BaseSolution.Domain.Enums

@inject IDialogService DialogService
@inject ISnackbar _snackbar
@inject NavigationManager _navigate;

<MudDialog>
    <DialogContent>
        <MudCard>
            <MudForm>
                <MudCardContent>
                    <MudGrid>
                        <MudItem xs="12">
                            <MudTextField T="string" @bind-Value="_customerDto.UserName" Label="Tên tài khoản*" />
                            <MudTextField T="string" @bind-Value="_customerDto.Name" Label="Tên*" />
                            <MudTextField T="string" @bind-Value="_customerDto.PassWord" Label="Mật khẩu*" Variant="Variant.Text" InputType="@PasswordInput" Adornment="Adornment.End" OnAdornmentClick="ButtonTestclick" AdornmentAriaLabel="Show Password" AdornmentIcon="@PasswordInputIcon" />
                            <MudTextField T="string" @bind-Value="_customerDto.ConfirmPassword" Label="Xác nhận mật khẩu*" Variant="Variant.Text" InputType="@PasswordInput" Adornment="Adornment.End" OnAdornmentClick="ButtonTestclick" AdornmentAriaLabel="Show Password" AdornmentIcon="@PasswordInputIcon" />
                            <MudTextField T="string" @bind-Value="_customerDto.PhoneNumber" Label="Số điện thoại*" />
                            <MudTextField T="string" @bind-Value="_customerDto.Email" Label="Email*"/>
                        @*     <MudDatePicker @bind-date="_dateOfBirth" Label="Ngày sinh*" /> *@
                        </MudItem>
                       @*  <MudItem xs="6">
                        </MudItem>
                        <div class="d-flex align-center justify-space-between">
                            <MudCheckBox T="bool" Required="true" RequiredError="yêu cầu đồng ý" Label="Tôi cam kết tuấn theo chính sách bảo mật và điều khoản sử dụng Của URF CENIMAS"  />
                        </div>   *@             
                    </MudGrid>
                </MudCardContent> 
            </MudForm>   
        </MudCard>
    </DialogContent>
    <DialogActions>
        <MudButton Color="Color.Error" OnClick="Cancel">Hủy</MudButton>
        <MudButton Color="Color.Secondary" OnClick="OnButtonClicked">Đăng ký</MudButton>
    </DialogActions>
</MudDialog>
@code {
    [CascadingParameter] MudDialogInstance _mudDialog { get; set; }

    [Inject]
    public ICustomerRepo _customerRepo { get; set; }
    [Inject] 
    private IDialogService _dialogService { get; set; } = null!;

    public CustomerDto _customerDto = new();
    public List<CustomerDto> _lst = new();

    public RegisterRequest obj = new();
    public ViewCustomerWithPaginationRequest customer_ = new();

    bool isTrue = true;


    [Parameter]
    public Guid idCustomer { get; set; }

    MudForm form;
    InputType PasswordInput = InputType.Password;
    string PasswordInputIcon = Icons.Material.Filled.VisibilityOff;

    DateTime? _dateOfBirth { get; set; }

    public string imageUrl { get; set; } = "";
    public bool isShow;

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    private async Task LoadData()
    {

        var result = await _customerRepo.GetAllActive(customer_);
        _lst = result.Data.Data.ToList();
    }


    IList<IBrowserFile> files = new List<IBrowserFile>();
    ImageHandle imageHandle = new();

    void ButtonTestclick()
    {
        @if (isShow)
        {
            isShow = false;
            PasswordInputIcon = Icons.Material.Filled.VisibilityOff;
            PasswordInput = InputType.Password;
        }
        else
        {
            isShow = true;
            PasswordInputIcon = Icons.Material.Filled.Visibility;
            PasswordInput = InputType.Text;
        }
    }

    private async Task UploadFiles(IBrowserFile file)
    {
        imageUrl = @"\image\Customer\" + await imageHandle.AddImage(file, "Customer");
        files.Add(file);
    }


    void Submit() => _mudDialog.Close(DialogResult.Ok(true));
    void Cancel() => _mudDialog.Cancel();

    private async Task OnButtonClicked()
    {
        obj.UserName = _customerDto.UserName;
        obj.Password = _customerDto.PassWord;
        obj.ConfirmPassword = _customerDto.ConfirmPassword;
        obj.Name = _customerDto.Name;
        obj.Email = _customerDto.Email;
        obj.PhoneNumber = _customerDto.PhoneNumber;
        // obj.Address = _customerDto.Address;
        // DateTimeOffset releaseDATE = new DateTimeOffset((DateTime)_dateOfBirth!, TimeSpan.Zero);
        // obj.DateOfBirth = releaseDATE; 
        bool? confirm = await DialogService.ShowMessageBox(
         "Xác nhận",
         "Bạn có chắc tạo tài khoản mới?",
         yesText: "Xác nhận", cancelText: "Hủy");
        if (confirm == true)
        {
            var result = await _customerRepo.RegisterAsync(obj);
            if (result == true)
            {
                _mudDialog.Close(DialogResult.Ok(true));
                _snackbar.Add("Đăng ký thành công", Severity.Success);
                _navigate.NavigateTo("/");
                StateHasChanged();
            }
            else
            {
                _snackbar.Add
                (
                    "Thêm thất bại",
                        Severity.Error
                );
            }
        }
    }
}