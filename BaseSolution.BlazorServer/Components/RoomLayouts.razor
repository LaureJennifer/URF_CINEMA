@* @page "/roomLayouts"
@using BaseSolution.Application.Interfaces.Repositories.ReadOnly
@using BaseSolution.Application.Interfaces.Repositories.ReadWrite
@using BaseSolution.Application.ViewModels.Excels.Mics
@using BaseSolution.Domain.Entities
@inject ISnackbar _mudSnackbar
@inject IFileHandlingReadOnlyRepository _repoReadOnlyFileHandling
@inject IFileHandlingReadWriteRepository _repoReadWriteFileHandling
@inject IJSRuntime _jsRuntime;
@if(Rooms != null){
    <MudGrid>
        @foreach (var room in Rooms)
        {
            <MudItem xs="12" sm="6" md="4">
                <MudPaper Elevation="1" Class="pa-4">
                    <h5>@room.Name</h5>
                    @foreach (var seat in room.Seats)
                    {
                        <MudChip Color="Color.Primary">@seat.Code</MudChip>
                    }
                </MudPaper>
            </MudItem>
        }
    </MudGrid>
}
@code{
    [Parameter]
    public string? FileName { get; set; } = null;

    [Parameter]
    public List<ExcelParameterVM> Parameters { get; set; } = new();

    [Parameter]
    public string Function { get; set; } = "";

    [Parameter]
    public bool IsTemplate { get; set; } = false;

    [Parameter]
    public EventCallback OnClose { get; set; }

    private ExcelOutputVM? _excelOutput = null;
    private bool Enable = true;

    public List<RoomLayoutEntity> Rooms{ get; set; }
    protected override async Task OnInitializedAsync()
    {

    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        // if (firstRender)
        // {
        //     if (Function != "")
        //     {
        //         _excelOutput = await _repoReadWriteFileHandling.ExcelExport(new()
        //             {
        //                 Function = Function,
        //                 Parameters = Parameters,
        //                 IsTemplate = IsTemplate,
        //             });
        //     }
        //     else
        //     {
        //         _mudSnackbar.Add("Chưa định nghĩa phương thức", Severity.Error);
        //     }

            var fileStream = await _repoReadOnlyFileHandling.GetFileStreamAsync(_excelOutput.FileName, "Excels/Handled");

            var memoryStream = new MemoryStream();
            await fileStream.CopyToAsync(memoryStream);

            await _jsRuntime.InvokeAsync<object>("saveAsFile", (FileName ?? "Export") + DateTime.Now + ".xlsx",
                Convert.ToBase64String(memoryStream.ToArray()));

            await OnClose.InvokeAsync();
        // }
    }
} *@