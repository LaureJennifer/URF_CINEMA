@page "/booking/{departmentId}/{customerId}/{filmId}"
@using BaseSolution.Application.DataTransferObjects.Booking
@using BaseSolution.Application.DataTransferObjects.Booking.Request
@using BaseSolution.Application.DataTransferObjects.Film
@using BaseSolution.Application.DataTransferObjects.FilmDetail
@using BaseSolution.Application.DataTransferObjects.FilmDetail.Request
@using BaseSolution.Application.DataTransferObjects.FilmScheduleRoom
@using BaseSolution.Application.DataTransferObjects.FilmScheduleRoom.Request
@using BaseSolution.Application.DataTransferObjects.Room
@using BaseSolution.Application.DataTransferObjects.Room.Request
@using BaseSolution.BlazorServer.Data.DataTransferObjects.Film.Request
@using BaseSolution.BlazorServer.Data.DataTransferObjects.FilmSchedule.Request
@using BaseSolution.BlazorServer.Repositories.Implements
@using BaseSolution.BlazorServer.Repositories.Interfaces
@using BaseSolution.Domain.Enums
@inject NavigationManager _navigationManager
@if (_selectedFilm == null)
{
    <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
}
else
{
if (_showDateList != null)
    {
        <MudTabs Elevation="0" Style="color : white; background-color:#014380;">

            @foreach (var date in _showDateList)
            {
                <MudTabPanel OnClick="()=>SelectDate(date)" Text="@date.ToString("dd/MM")" Style="background-color:#014380;color:#F2FFFF;">

                </MudTabPanel>

            }     
        </MudTabs>
        
        <iframe width="560" height="700" src="@_selectedFilm.TrailerURL"
                title="YouTube video player" frameborder="0" allow="accelerometer; auto play; Fullscreen; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share"
                referrerpolicy="strict-origin-when-cross-origin"></iframe>
        <MudGrid Style="background-color:#04192E" Class="border border-solid mud-border-info pa-4">
            <MudItem xs="12" lg="12" md="12">
                <MudText Class="mb-4" Typo="Typo.h3" Style="color:#014380">Tên phim : @_selectedFilm.Title</MudText>
                <MudGrid>
                    <MudItem><MudIcon Icon="@Icons.Material.TwoTone.Discount" Style="color:white" /></MudItem>
                    <MudItem xs="2" md="2" lg="2"><MudText Typo="Typo.body2" Style="color:white">Thể loại: @_selectedFilm.Genres</MudText></MudItem>
                </MudGrid>
                <MudText Typo="Typo.body1" Style="color:white">Thời lượng: @_selectedFilm.Duration phút</MudText>
                <MudText Typo="Typo.body1" Style="color:white">Phụ đề: @_selectedFilm.Script</MudText>
                <MudText Typo="Typo.body1" Style="color:white">Đạo diễn: @_selectedFilm.DirectedBy</MudText>
                <MudText Typo="Typo.body1" Style="color:white">Diễn viên: @_selectedFilm.Actor</MudText>
                <MudText Typo="Typo.body1" Style="color:white">Độ tuổi: @_selectedFilm.AgeRating</MudText>
                <MudText Typo="Typo.body1" Style="color:white">Nội dung: @_selectedFilm.Description</MudText>

                    @foreach (var time in _showTimeList)
                {
                    if (time.Date == _showDateSelected.Date)
                    {
                        <MudButton OnClick="()=>SelectTime(time)" Variant="MudBlazor.Variant.Filled" Class="mx-2 mt-5" Style="background-color:#CCA943">@time.ToString("hh : mm tt")</MudButton>
                    }
                }
            </MudItem>
        </MudGrid>
    }
    else
    {
        <MudAlert Severity="Severity.Warning">Không có dữ liệu</MudAlert>

    }

}

@code {
    [Parameter]
    public string filmId { get; set; }
    [Parameter]
    public string departmentId { get; set; }
    [Parameter] public string customerId { get; set; }
    [Inject]
    IBookingRepo _bookingRepo{ get; set; }
    [Inject] public IRoomRepo _roomRepo { get; set; }
    [Inject] public IFilmScheduleRoomRepo _filmScheduleRoomRepo { get; set; }
    [Inject]public IFilmDetailRepo _filmDetailRepo { get; set; }
    [Inject]
    IRoomByFilmScheduleRepo _roomByFilmScheduleRepo{ get; set; }
    [Inject] IFilmScheduleRepo _filmScheduleRepo { get; set; }
    IFilmScheduleRoomRepo _filmSheduleRoomRepo { get; set; }
    ViewBookingWithPaginationRequest _bookingRequest = new() { PageSize = int.MaxValue - 1 };
    FilmDto _selectedFilm { get; set; }
    ViewFilmScheduleWithPaginationRequest obj = new();
    ViewFilmScheduleRoomWithPaginationRequest _viewFilmScheduleRoomWithPaginationRequest = new();
    FilmScheduleRoomFindByDateTimeRequest _filmScheduleRoomFindByDateTimeRequest = new();
    ViewRoomWithPaginationRequest _viewRoomWithPaginationRequest = new();
    ViewFilmDetailWithPaginationRequest _viewFilmDetailWithPaginationRequest = new();
    ViewRoomByFilmScheduleWithPaginationRequest _viewRoomByFilmScheduleWithPaginationRequest = new();
    List<FilmDto> _lstFilm = new();    
    DateTimeOffset _showDateSelected;
    DateTimeOffset _showTimeSelected;
    Guid _roomId;
    Guid _filmScheduleId;
    List<DateTimeOffset> _showDateList = new();
    List<DateTimeOffset> _showTimeList = new();
    List<RoomDto> _lstRoomByDepartment { get; set; } = new();
    List<Guid> _lstFilmScheduleIdRoom { get; set; } = new();
    List<Guid> _lstFilmScheduleIdFilm { get; set; } = new();
    IEnumerable<Guid> _lstSchedule { get; set; }
    List<Guid> _lstScheduleId { get; set; } = new();
    List<BookingDto> _lstBookingForCompare { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        await LoadRoomByDepartment(departmentId);

        await GetFilmById(filmId);
    }

    private async Task GetFilmById(string filmId)
    {
        var result = await _bookingRepo.GetByIdAsync(filmId);
        _selectedFilm = result.Data;
        _viewFilmDetailWithPaginationRequest.PageSize = 50;
        _viewFilmDetailWithPaginationRequest.FilmId = Guid.Parse(filmId);
        var result1 = await _filmDetailRepo.GetFilmScheduleByFilm(_viewFilmDetailWithPaginationRequest);
        _lstFilmScheduleIdFilm = result1.Data.Data.Select(x => x.FilmScheduleId).ToList();

        _lstSchedule = _lstFilmScheduleIdFilm.Intersect(_lstFilmScheduleIdRoom);
        foreach (var item in _lstSchedule)
        {
            var rs = await _filmScheduleRepo.GetFilmScheduleByIdAsync(item);
            var x = rs.Data;
            if (x != null)
            {
                _showTimeList.Add(x.ShowTime);
                _lstScheduleId.Add(item);
            }

        }
        _showDateList = _showTimeList.DistinctBy(x => x.Date).ToList();

        _showTimeSelected = _showDateList[0];    
        _showDateSelected = _showDateList[0];

    }

    private void SelectDate(DateTimeOffset date)
    {
        _showDateSelected = date;
    }

    private void SelectTime(DateTimeOffset time)
    {
        _showTimeSelected = time;
        var position = _showTimeList.IndexOf(_showTimeSelected);
        var IdFilmSchedule = _lstScheduleId[position];
        NavigateToRoom(IdFilmSchedule.ToString());
    }

    private async Task FindFilmScheduleRoomByDateTime(string idFilmSchedule)
    {

        _viewRoomByFilmScheduleWithPaginationRequest.FilmScheduleId = Guid.Parse(idFilmSchedule);
        _viewRoomByFilmScheduleWithPaginationRequest.PageSize = 50;
        var result = await _roomByFilmScheduleRepo.GetRoomByFilmScheduleAsync(_viewRoomByFilmScheduleWithPaginationRequest);
        var listRoom = result.Data.Data.ToList();
        var lstRoomForSelect = listRoom.Select(x => x.RoomId).Intersect(_lstRoomByDepartment.Select(x => x.Id));
        if (lstRoomForSelect.Count() != 1)
        {
            foreach (var room in lstRoomForSelect)
            {
                await GetListBooking(room.ToString());
                var rom_ = await _roomRepo.GetByIdAsync(room); 
                if (_lstBookingForCompare.Count(x => x.SeatStatus == EntityStatus.SoldOut || x.SeatStatus == EntityStatus.YourSeat) <= rom_.Data!.Capacity - 2)
                {
                    _roomId = room;
                    return;
                }
            }

        }else
        {
            _roomId = lstRoomForSelect.First();
        }

    }
    async Task GetListBooking(string roomId)
    {
        _bookingRequest.RoomId = Guid.Parse(roomId);
        _bookingRequest.DepartmentId = Guid.Parse(departmentId);

        var result = await _bookingRepo.GetAllForCompare(_bookingRequest);
        _lstBookingForCompare = result.Data.ToList();
    }

    private async Task LoadRoomByDepartment(string idDepartment)
    {
        _viewRoomWithPaginationRequest.PageSize = 50;
        _viewRoomWithPaginationRequest.DepartmentId = Guid.Parse(idDepartment);
        var result = await _roomRepo.GetRoomByDepartment(_viewRoomWithPaginationRequest);
        _lstRoomByDepartment = result.Data.Data.ToList();
        foreach(var item in _lstRoomByDepartment)
        {
            await LoadFilmScheduleByRoom(item.Id.ToString());
        }
    }
    private async Task LoadFilmScheduleByRoom(string idRoom)
    {
        _viewFilmScheduleRoomWithPaginationRequest.PageSize = 50;
        _viewFilmScheduleRoomWithPaginationRequest.RoomId = Guid.Parse(idRoom);
        var result = await _filmScheduleRoomRepo.GetFilmScheduleRoomByRoomAsync(_viewFilmScheduleRoomWithPaginationRequest);
        var lst = result.Data.Data.Select(x => x.FilmScheduleId).ToList();
        _lstFilmScheduleIdRoom.AddRange(lst);

    }
    private async void NavigateToRoom(string idFilmSchedule)
    {
        await FindFilmScheduleRoomByDateTime(idFilmSchedule);
        _navigationManager.NavigateTo($"/room/{departmentId}/{customerId}/{filmId}/{idFilmSchedule.ToString()}/{_roomId.ToString()}");
    }

}
