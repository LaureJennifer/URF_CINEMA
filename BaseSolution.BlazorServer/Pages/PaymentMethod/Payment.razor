@page "/payment/{departmentId}/{customerId}/{total}"
@using BaseSolution.Application.DataTransferObjects.Bill
@using BaseSolution.Application.DataTransferObjects.Bill.Request
@using BaseSolution.Application.DataTransferObjects.Booking
@using BaseSolution.Application.DataTransferObjects.Booking.Request
@using BaseSolution.Application.DataTransferObjects.Customer
@using BaseSolution.Application.DataTransferObjects.Customer.Request
@using BaseSolution.Application.DataTransferObjects.Department
@using BaseSolution.Application.DataTransferObjects.Film
@using BaseSolution.Application.DataTransferObjects.FilmDetail
@using BaseSolution.Application.DataTransferObjects.FilmDetail.Request
@using BaseSolution.Application.DataTransferObjects.FilmSchedule
@using BaseSolution.Application.DataTransferObjects.PaymentMethod
@using BaseSolution.Application.DataTransferObjects.PaymentMethod.Request
@using BaseSolution.Application.DataTransferObjects.Room
@using BaseSolution.Application.DataTransferObjects.Seat
@using BaseSolution.Application.DataTransferObjects.Seat.Request
@using BaseSolution.Application.DataTransferObjects.Ticket.Request
@using BaseSolution.Application.DataTransferObjects.Transaction
@using BaseSolution.BlazorServer.Components
@using BaseSolution.BlazorServer.Data.Extensions
@using BaseSolution.BlazorServer.Repositories.Interfaces
@using BaseSolution.Infrastructure.ViewModels
@using MudBlazor
@using System.Globalization
@inject SaveCustomerId _saveCustomerId;
@inject IDialogService _dialogService
@inject ISnackbar _snackbar
@inject NavigationManager _navigationManager;
@* @attribute [Authorize(Roles = "{ADMIN,Nhân viên,Customer")] *@

<MudAppBar Style="background-color:burlywood" Fixed="false" Elevation="0">
    <MudLink Href="/room"><MudIconButton Icon="@Icons.Material.Filled.ArrowBackIos" Color="Color.Inherit" Edge="Edge.Start" /></MudLink>
    <MudText>Thanh toán</MudText>
    <MudSpacer />
</MudAppBar>

<MudPaper Style="background-color:#180F20;width:auto;height:auto;" Class="mb-3">
    <MudContainer Fixed="true">
        <MudPaper Square="true" Style="background-color:#180F20">
            <MudGrid>
                <MudItem xs="8" md="8" lg="8" Style="background-color:#B7DEA4;">
                    <MudGrid>
                        <MudItem xs="12" md="12" lg="12" Class="mt-5">
                            <MudText Style="color:white;">THÔNG TIN THANH TOÁN</MudText>
                        </MudItem>
                        @if (_customer != null)
                        {
                            <MudItem xs="12" md="12" lg="12">

                                <MudPaper>

                                    <MudGrid>
                                        <MudItem xs="4" md="4" Class="ml-5">
                                            <MudText Color="Color.Dark">Họ Và Tên: @_customer.Name</MudText>
                                        </MudItem>
                                        <MudItem xs="4" md="4" Class="ml-5">
                                            <MudText Style="visibility:hidden;" Color="Color.Dark">@_customer.Id</MudText>
                                        </MudItem>
                                        <MudItem xs="4" md="4">
                                            <MudText Color="Color.Dark">SĐT: @_customer.PhoneNumber</MudText>
                                        </MudItem>
                                        <MudItem xs="3" md="3">
                                            <MudText Color="Color.Dark">Email: @_customer.Email</MudText>
                                        </MudItem>
                                    </MudGrid>

                                </MudPaper>
                            </MudItem>
                        }else
                        {
                            <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
                        }

                        <MudItem xs="11" lg="11" md="11">
                            <MudText Align="Align.Right" Style="color:#180F20">Tổng tiền: @totalPrice.ToString("C0") vnd</MudText>
                        </MudItem>
                        <MudItem xs="11" lg="11" md="11">
                            <MudText Align="Align.Right" Style="color:#180F20">Số tiền cần thanh toán: @totalPrice.ToString("C0") vnd</MudText>
                        </MudItem>
                        <MudItem class="custom-item">
                            <MudTextField Label="Tổng tiền" Value="@_billDto.TotalPrice" ReadOnly="true" class="custom-textfield" />
                        </MudItem>
                        <MudDivider />
                        <MudText Align="Align.Left" Style="color:#180F20;">Phương thức thanh toán</MudText>
                        <MudDivider />
                    </MudGrid>
                    @if (_lstPayment == null)
                    {
                        <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
                    }
                    else
                    {
                        @if (_lstPayment.Count < 0)
                        {
                            <MudAlert Severity="Severity.Warning">Không có dữ liệu</MudAlert>
                        }
                        else
                        {
                            <MudGrid>
                            <MudItem xs="12" md="12" lg="12" Style="color:darkred;">
                                <MudField Label="Chọn thẻ thanh toán" Variant="Variant.Text" InnerPadding="false">
                                    <MudSelect T="string" @bind-Value="@SelectedOption">
                                        @foreach (var item in _lstPayment)
                                        {
                                            <MudSelectItem T="string" Style="color:darkred;">@item.Name</MudSelectItem>
                                        }
                                    </MudSelect>
                                </MudField>
                                @* <MudPaper Style="background-color:#180F20;width:auto;height:auto;">
                                    <MudContainer Fixed="true">
                                        <div>
                                            <MudButton OnClick="@(() => Pay(_customerDto.Id))">Thanh toán</MudButton>
                                            <MudButton OnClick="QueryDR">Truy vấn</MudButton>
                                                                                     <MudButton OnClick="Refund">Hoàn tiền</MudButton> 
                                        </div>
                                    </MudContainer>
                                </MudPaper> *@
                            </MudItem>
                        </MudGrid>
                        }
                        
                    }
                    
                </MudItem>
                <MudItem xs="4" md="4" lg="4">
                    @if (_filmDto != null)
                    {
                        <MudPaper Style="background-color:#03213B">
                            <MudGrid>
                                <MudItem xs="12" md="12" lg="12">
                                    <MudImage Src="@_filmDto.UrlImage" Style="width:90%;height:70%;" Alt="Swedish Farm House" Elevation="1" Class="rounded-lg ma-4" />
                                </MudItem>
                                <MudItem xs="12" md="12" lg="12" Class="ml-3">
                                    <MudText Typo="Typo.h6" Style="color:white">Tên phim: @_filmDto.Title</MudText>
                                    <MudText Typo="Typo.subtitle1" Style="color:white">Định dạng phim: @_filmDto.Script</MudText>
                                </MudItem>
                                <MudItem xs="12" md="12">
                                    <MudText Class="ml-3" Typo="Typo.body1" Style="color:white;"><MudIcon Icon="@Icons.Material.TwoTone.Discount" />Thể Loại: @_filmDto.Genres</MudText>
                                    <MudText Class="ml-3" Style="color:white"><MudIcon Icon="@Icons.Material.Filled.Alarm" />Thời lượng: @_filmDto.Duration phút</MudText>
                                    <MudDivider />
                                </MudItem>
                                <MudItem xs="12" md="12" lg="12">
                                    <MudText Class="ml-3" Style="color:white"><MudIcon Icon="@Icons.Material.Filled.AccountBalance" />Rạp chiếu: @_bookingDto.DepartmentName</MudText>
                                    <MudText Class="ml-3" Style="color:white"><MudIcon Icon="@Icons.Material.Filled.CalendarMonth" />Ngày chiếu: @_filmScheduleDto.ShowDate.ToLocalTime().ToString("dd/MM/yyyy")</MudText>
                                    <MudText Class="ml-3" Style="color:white"><MudIcon Icon="@Icons.Material.Filled.CalendarMonth" />Giờ chiếu: @_filmScheduleDto.ShowTime.ToLocalTime().ToString("hh:mm tt")</MudText>
                                    <MudText Class="ml-3" Style="color:white"><MudIcon Icon="@Icons.Material.Filled.Computer" />Phòng chiếu: @_bookingDto.RoomCode</MudText>
                                    <MudText Class="ml-3" Style="color:white">
                                        <MudIcon Icon="@Icons.Material.Filled.EventSeat" />  @("Ghế ngồi : ")
                                    @foreach (var seat in lstBook)
                                    {
                                       @seat.SeatCode@(" ")
                                    }
                                    </MudText>
                                    <MudDivider />
                                </MudItem>
                                <MudGrid>
                                    <MudItem xs="3" lg="3" md="3"></MudItem>
                                    <MudItem xs="3" lg="3" md="3">
                                        <MudButton OnClick="@(() => _navigationManager.NavigateTo($"/home/{departmentId}"))" Style="color:white">Trang chủ</MudButton>
                                    </MudItem>
                                    <MudItem xs="3" lg="3" md="3">
                                        <MudButton OnClick="@(() => Pay(_customerDto.Id))" Style="color:white">Thanh Toán</MudButton>
                                    </MudItem>
                                    <MudItem xs="3" lg="3" md="3"></MudItem>
                                </MudGrid>
                            </MudGrid>
                        </MudPaper>
                    }
                    else
                    {
                        <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
                    }

                    <MudGrid />
                </MudItem>
            </MudGrid>
        </MudPaper>
    </MudContainer>
</MudPaper>


@code {
    [Inject]
    public IBillRepo _billRepo { get; set; }
    [Inject]
    public IFilmScheduleRepo _filmScheduleRepo { get; set; }

    [Inject]
    public IPaymentMethodRepo _paymentMethodRepo { get; set; }

    [Inject]
    public IFilmRepo _filmRepo { get; set; }
    [Inject]
    public ITicketRepo _ticketRepo { get; set; }

    [Inject]
    public IDepartmentRepo _departmentRepo { get; set; }

    [Inject]
    public IRoomRepo _roomRepo { get; set; }

    [Inject]
    public ISeatRepo _seatRepo { get; set; }
    [Inject]
    public IFilmDetailRepo _filmDetailRepo { get; set; }
    [Inject]
    public ICustomerRepo _customerRepo { get; set; }
    public List<BillDto> _lst = new();
    public List<PaymentMethodDto> _lstPayment = new();
    public FilmDto _filmDto { get; set; }

    public CustomerDto _customerDto = new();
    public BillDto _billDto = new();
    FilmScheduleDto _filmSchedule = new();
    public Guid idBill { set; get; }
    public Guid idFilm { set; get; }
    [Parameter]
    public string departmentId { set; get; }
    [Parameter] 
    public string total { set; get; }
    public Guid idRoom { set; get; }
    public Guid idSeat { set; get; }
    [Parameter] public string customerId { get; set; }
    [Parameter] public string filmId { get; set; }
    [Parameter] public string filmScheduleId { get; set; }
    [Parameter] public string roomId { get; set; }
    // [Parameter] public string customerid { get; set; }
    [Parameter] public DateTimeOffset createdTime { get; set; }
    [Parameter]
    public string bookingIds { get; set; }
    [Inject] IBookingRepo _bookingRepo { get; set; }
    BookingDto _bookingDto { get; set; } = new();
    List<BookingDto> lstBook { get; set; } = new();
    CustomerDto _customer = new();
    Decimal totalPrice { get; set; } = 0;
    FilmScheduleDto _filmScheduleDto { get; set; } = new();
    bool _checkUpdateBookingSeatStatus { get; set; } = false;
    BillCreateRequest _billCreateRequest = new();
    ViewBillWithPaginationRequest _viewBillWithPaginationRequest = new();
    ViewPaymentMethodWithPaginationRequest _viewPaymentMethodWithPaginationRequest = new();
    protected async override Task OnInitializedAsync()
    {
        totalPrice = decimal.Parse(total);
        lstBook = _saveCustomerId.ListBooking;
        _bookingDto = lstBook.First();
        await LoadData();
        await LoadFilm();
        await LoadFilmSchedule();
        await GetCustomerId();
    }
    BookingUpdateRequest _bookingUpdateRequest = new();
    public string SelectedOption { get; set; }

    public async Task GetCustomerId()
    {
        var result = await _customerRepo.GetByIdAsync(Guid.Parse(customerId));
        _customer = result.Data!;

    }

    async Task LoadFilm()
    {
        var result = await _filmRepo.GetByIdAsync(_bookingDto.FilmId);
        _filmDto = result.Data!;
    }
    async Task LoadFilmSchedule()
    {
        var result = await _filmScheduleRepo.GetFilmScheduleByIdAsync(_bookingDto.FilmScheduleId);
        _filmScheduleDto = result.Data!; 
    }

    private void Paymentmethod()
    {
        // Xử lý thanh toán ở đây
        _navigationManager.NavigateTo($"/pay/vnpay/{total}");

    }

    private void QueryDR()
    {
        // Xử lý truy vấn ở đây
        _navigationManager.NavigateTo("/pay/query");
    }
    bool _checkCreateBill { get; set; } = false;
    private async Task Pay( Guid idCustomer)
    {

        var confirm = await _dialogService.ShowMessageBox
        (
            "Thông báo",
            "Xác nhận thanh toán?",
            "Xác nhận",
            cancelText: "Hủy"
        );
        if (confirm == true)
        {
            await CreateBill();
            if (_checkCreateBill)
            {
                _snackbar.Add("Đã thanh toán ! Vui lòng xem thông tin ở quản lí hóa đơn ", Severity.Info);
                StateHasChanged();
            }

        }
        else
        {
            _snackbar.Add("Thanh toán đã được hủy", Severity.Info);

        }
    }
    async Task CreateBill()
    {
        _billCreateRequest.CustomerId = Guid.Parse(customerId);
        _billCreateRequest.DepartmentId = Guid.Parse(departmentId);
        _billCreateRequest.TotalPrice = Convert.ToDouble(total);
        string code = Guid.NewGuid().ToString();
        _billCreateRequest.Code = code;
           
        var createBill = await _billRepo.AddAsync(_billCreateRequest);
        if (createBill)
        {
            _checkCreateBill = true;
            _viewBillWithPaginationRequest.CustomerId = Guid.Parse(customerId);
            _viewBillWithPaginationRequest.DepartmentId = Guid.Parse(departmentId);
            _viewBillWithPaginationRequest.Code = code;
            var getBill = await _billRepo.GetAllActive(_viewBillWithPaginationRequest);
            _billDto = getBill.Data.Data.First();
            if (_billDto != null)
            {

                await CreateTicket(_billDto.Id);
            }
        }
        else
        {
            _checkCreateBill = false;
        }
    }
    async Task CreateTicket(Guid idBill)
    {
        foreach (var booking in lstBook)
        {
            var result = await _seatRepo.GetByIdAsync(booking.SeatId);
            var seatPrice = result.Data!.Price;
            var ticket = new TicketCreateRequest
                {
                    BillId = idBill,
                    FilmId = booking.FilmId,
                    BookingId = booking.Id,
                    Code = Guid.NewGuid().ToString(),
                    Price = seatPrice
            };
            var createTicket = await _ticketRepo.AddAsync(ticket);
            if (createTicket)
            {
                await UpdateBookingSeat();
                _checkCreateBill = true;
            }
            else
            {
                _checkCreateBill = false;
            }
        }

    }
    async Task UpdateBookingSeat()
    {

        foreach (var booking in lstBook)
        {
            _bookingUpdateRequest.SeatStatus = Domain.Enums.EntityStatus.SoldOut;
            _bookingUpdateRequest.Id = booking.Id;
            var result = await _bookingRepo.UpdateAsync(_bookingUpdateRequest);
            if (result)
            {
                _checkUpdateBookingSeatStatus = true;
            }
            else
            {
                _checkUpdateBookingSeatStatus = false;
            }
        }

        if (_checkUpdateBookingSeatStatus)
        {

            _checkCreateBill = true;
        }
        else
        {
            _checkCreateBill = false;
        }
    }
    // private async Task Paymethod()
    // {

    //     var confirm = await _dialogService.ShowMessageBox
    //     (
    //         "Thông báo",
    //         "Xác nhận thanh toán?",
    //         "Xác nhận",
    //         cancelText: "Hủy"
    //     );
    //     if (confirm == true)
    //     {
    //         var bill = new CheckoutVM()
    //             {
    //                 BillId =  idBill,
    //                 TotalPrice = _billDto.TotalPrice,
    //                 DepartmentName = _bookingDto.DepartmentName,
    //                 filmID = _filmDto.Id,
    //                 BookingId = _bookingDto.Id,
    //                 HoTen = _customerDto.Name,
    //                 DepartmentId = Guid.Parse(departmentId)
    //             };
    //         await _billRepo.CreateNewPayment(bill);
    //         _snackbar.Add("Đã thanh toán ! Vui lòng xem thông tin ở quản lí hóa đơn ", Severity.Info);
    //         await LoadData();
    //         StateHasChanged();
    //     }
    //     else
    //     {
    //         _snackbar.Add("Thanh toán đã được hủy", Severity.Info);

    //     }
    // }

    private async Task LoadData()
    {
        var result1 = await _paymentMethodRepo.GetAllActive(_viewPaymentMethodWithPaginationRequest);
        _lstPayment = result1.Data!.Data.ToList(); 
    }
}

