@page "/seat/list"
@using BaseSolution.Application.DataTransferObjects.Seat
@using BaseSolution.Application.DataTransferObjects.Seat.Request
@using BaseSolution.BlazorServer.Components.Seat
@using BaseSolution.BlazorServer.Repositories.Interfaces
@using MudBlazor
@inject IDialogService _dialogService
@inject ISnackbar _snackbar

<MudPaper Class="pa-5">
    <MudGrid>
        <MudItem xs="8">
            <MudText Class="mt-3" Typo="Typo.h4">Danh sách ghế ngồi</MudText>
        </MudItem>
        <MudItem xs="4">
            <MudTextField @bind-Value="searchString" Placeholder="Tìm kiếm" Adornment="Adornment.End" AdornmentIcon="@Icons.Material.Filled.Search" AdornmentColor="Color.Secondary" Class="mr-3" />
        </MudItem>
    </MudGrid>
@*     <MudButton @onclick="CreateDialog" Variant="Variant.Filled" Color="Color.Success" Class="mt-3"><MudIcon Icon="@Icons.Material.Filled.AddCircleOutline"></MudIcon>Thêm mới</MudButton>
 *@    @if (_lst == null)
    {
        <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
    }
    else
    {
        if (_lst.Count == 0)
        {
            <MudAlert Severity="Severity.Warning">Không có dữ liệu</MudAlert>
        }
        else
        {
            <MudTable Items="@_lst" Class="mt-4 " Hover="true" FixedHeader="true">
                <HeaderContent>
                    <MudTh>STT</MudTh>
                    <MudTh>Mã ghế</MudTh>
                    <MudTh>Loại</MudTh>
                    <MudTh>Giá</MudTh>
                    <MudTh>Trạng thái</MudTh>
                    <MudTh>Hành động</MudTh>
                </HeaderContent>
                <RowTemplate>
                    <MudTd DataLabel="Stt">@(_lst.IndexOf(context) + 1)</MudTd>
                    <MudTd DataLabel="Mã ghế">@context.Code</MudTd>
                    <MudTd DataLabel="Loại">@context.Type</MudTd>
                    <MudTd DataLabel="Giá">@context.Price</MudTd>
                    <MudTd DataLabel="Trạng thái">@context.Status</MudTd>
                    <MudTd>
                        <MudIconButton OnClick="@(async()=> await UpdateDialog(context.Id))" Variant="Variant.Filled" Color="Color.Warning" Icon="@Icons.Material.Filled.BorderColor"></MudIconButton>
                        <MudIconButton OnClick="(async()=> await OnDeleteClicked(context.Id))" Variant="Variant.Filled" Color="Color.Error" Icon="@Icons.Material.Filled.Delete"></MudIconButton>
                    </MudTd>
                </RowTemplate>
                <PagerContent>
                    <MudTablePager />
                </PagerContent>
            </MudTable>
            <MudMessageBox @ref="_mbox" Title="Xác nhận" CancelText="Hủy">
                <MessageContent>
                    Xác nhận xóa ghế!
                </MessageContent>
                <YesButton>
                    <MudButton Color="Color.Primary" OnClick="OnConfirmDelete">
                        Xác nhận
                    </MudButton>
                </YesButton>
            </MudMessageBox>
        }
    }
</MudPaper>

@code {
    [Inject]
    public ISeatRepo _seatRepo { get; set; }

    public List<SeatDto>? _lst { get; set; }

    public ViewSeatWithPaginationRequest obj = new();
    public SeatDeleteRequest _seatDelete = new();

    string searchString = string.Empty;

    MudMessageBox _mbox { get; set; }

    private async Task CreateDialog()
    {
        DialogOptions closeOnEscapeKey = new DialogOptions() { CloseOnEscapeKey = true };

        _dialogService.Show<Create>("Thêm mới ghế", closeOnEscapeKey);
        await LoadData();
    }

    private async Task UpdateDialog(Guid Id)
    {
        var parameters = new DialogParameters<Update>();
        parameters.Add(x => x.idSeat, Id);
        var dialog = await _dialogService.ShowAsync<Update>("Sửa thông tin ghế", parameters);
        var result = await dialog.Result;
        if (!result.Canceled)
        {
            await LoadData();
        }
    }

    private async Task OnDeleteClicked(Guid Id)
    {
        var seat = await _seatRepo.GetByIdAsync(Id);
        var data = seat.Data;
        _seatDelete.Id = data.Id;
        _seatDelete.DeletedTime = DateTime.Now;
        bool? result = await _mbox.Show();
        StateHasChanged();
    }

    public async Task OnConfirmDelete()
    {
        var removeConfirm = await _seatRepo.RemoveAsync(_seatDelete);
        if (removeConfirm.Success)
        {
            _snackbar.Add("Xóa thành công", Severity.Success);
        }
        else
        {
            _snackbar.Add("Xóa thất bại" + removeConfirm.Errors, Severity.Error);
        }
        await Task.Delay(1000);
        await LoadData();
    }

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    private async Task LoadData()
    {

        var result = await _seatRepo.GetAllActive(obj);
        _lst = result.Data.Data.ToList();
    }
}
