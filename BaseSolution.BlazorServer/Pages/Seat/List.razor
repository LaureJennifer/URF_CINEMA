@page "/seat/list"
@using BaseSolution.Application.DataTransferObjects.RoomLayout
@using BaseSolution.Application.DataTransferObjects.RoomLayout.Request
@using BaseSolution.Application.DataTransferObjects.Seat
@using BaseSolution.Application.DataTransferObjects.Seat.Request
@using BaseSolution.Application.ValueObjects.Common
@using BaseSolution.BlazorServer.Components.Seat
@using BaseSolution.BlazorServer.Repositories.Interfaces
@using MudBlazor
@inject IDialogService _dialogService
@inject ISnackbar _snackbar
@* @attribute [Authorize(Roles = $"{Roles.Admin},{Roles.Staff}")] *@
<MudPaper Class="pa-5">
    <MudGrid>
        <MudItem xs="9" md="9">
            <MudText Class="mt-3" Typo="Typo.h4">Danh sách ghế ngồi</MudText>
        </MudItem>
        @if (_lstRoomLayout == null)
        {
            <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
        }
        else
        {
            <MudItem xs="3" md="3">
                <MudSelect T="string" Label="Sơ đồ ghế" AnchorOrigin="Origin.BottomCenter" Value="@selectedRoomLayoutId" ValueChanged="(str)=>OnSelectedRoomLayout(str)">
                    @foreach (var roomLayout in _lstRoomLayout)
                    {
                        <MudSelectItem T="string" Value="@(roomLayout.Id.ToString())">@roomLayout.Name</MudSelectItem>
                    }
                    <MudSelectItem T="string" Value="@(Guid.Empty.ToString())">Tất cả các rạp</MudSelectItem>
                </MudSelect>

            </MudItem>
        }
        
    </MudGrid>
    @if (_lstSeat == null)
    {
        <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
    }
    else
    {
        if (_lstSeat.Count == 0)
        {
            <MudAlert Severity="Severity.Warning">Không có dữ liệu</MudAlert>
        }
        else
        {
            <MudTable Items="@_lstSeat" Class="mt-4 " Hover="true" FixedHeader="true">
                <HeaderContent>
                    <MudTh>STT</MudTh>
                    <MudTh Style="text-align:center">Mã ghế</MudTh>
                    <MudTh Style="text-align:center">Tên bố cục phòng</MudTh>
                    <MudTh>Loại</MudTh>
                    <MudTh>Giá</MudTh>
                    <MudTh Style="text-align:center">Trạng thái</MudTh>
                    <MudTh>Hành động</MudTh>
                </HeaderContent>
                <RowTemplate>
                    <MudTd DataLabel="STT">@(_lstSeat.IndexOf(context) + 1)</MudTd>
                    <MudTd DataLabel="Mã ghế" Style="text-align:center">@context.Code</MudTd>
                    <MudTd DataLabel="Tên bố cục phòng" Style="text-align:center">@context.RoomLayoutName</MudTd>
                    <MudTd DataLabel="Loại">@context.Type</MudTd>
                    <MudTd DataLabel="Giá">@context.Price</MudTd>
                    <MudTd DataLabel="Trạng thái" Style="text-align:center">@context.Status</MudTd>
                    <MudTd>
                        <MudIconButton OnClick="@(async()=> await UpdateDialog(context.Id))" Variant="Variant.Filled" Color="Color.Warning" Icon="@Icons.Material.Filled.BorderColor"></MudIconButton>
                        <MudIconButton OnClick="(async()=> await OnDeleteClicked(context.Id))" Variant="Variant.Filled" Color="Color.Error" Icon="@Icons.Material.Filled.Delete"></MudIconButton>
                    </MudTd>
                </RowTemplate>
                <PagerContent>
                    <MudTablePager />
                </PagerContent>
            </MudTable>
            <MudMessageBox @ref="_mbox" Title="Xác nhận" CancelText="Hủy">
                <MessageContent>
                    Xác nhận xóa ghế!
                </MessageContent>
                <YesButton>
                    <MudButton Color="Color.Primary" OnClick="OnConfirmDelete">
                        Xác nhận
                    </MudButton>
                </YesButton>
            </MudMessageBox>
        }
    }
</MudPaper>

@code {
        [Inject]
        public ISeatRepo _seatRepo { get; set; }

    public List<SeatDto>? _lstSeat { get; set; }
    string? selectedRoomLayoutId { get; set; }
    public ViewSeatWithPaginationRequest _viewSeatWithPaginationRequest = new(){PageSize = int.MaxValue-1};
    public SeatDeleteRequest _seatDelete = new();
    ViewRoomLayoutWithPaginationRequest _request = new() { PageSize = int.MaxValue - 1 };
    [Inject] IRoomLayoutRepo _roomLayoutRepo { get; set; }
    string? searchString = "";
    List<RoomLayoutDto> _lstRoomLayout { get; set; } = new();
    MudMessageBox _mbox { get; set; }

    private async Task LoadRoomLayoutForSelect()
    {
        var result = await _roomLayoutRepo.GetAllActive(_request);
        _lstRoomLayout = result.Data.Data.ToList();      
    }


    private async Task CreateDialog()
    {
        DialogOptions closeOnEscapeKey = new DialogOptions() { CloseOnEscapeKey = true };

        _dialogService.Show<Create>("Thêm mới ghế", closeOnEscapeKey);
        await LoadData(string.Empty);
    }

    private async Task UpdateDialog(Guid Id)
    {
        var parameters = new DialogParameters<Update>();
        parameters.Add(x => x.idSeat, Id);
        var dialog = await _dialogService.ShowAsync<Update>("Sửa thông tin ghế", parameters);
        var result = await dialog.Result;
        if (!result.Canceled)
        {
            await LoadData(string.Empty);
        }
    }

    private async Task OnDeleteClicked(Guid Id)
    {
        var seat = await _seatRepo.GetByIdAsync(Id);
        _seatDelete.Id = seat.Data.Id;

        bool? result = await _mbox.Show();
        StateHasChanged();
    }

    public async Task OnConfirmDelete()
    {

        var removeConfirm = await _seatRepo.RemoveAsync(_seatDelete);
        if (removeConfirm)
        {
            _snackbar.Add("Xóa thành công", Severity.Success);
        }
        else
        {
            _snackbar.Add("Xóa thất bại",Severity.Error);
        }
        await Task.Delay(1000);
        await LoadData(string.Empty);
    }

    protected override async Task OnInitializedAsync()
    {
        await LoadRoomLayoutForSelect();
        await LoadData(string.Empty);

    }

    private async Task LoadData(string roomLayoutId)
    {
        if (!string.IsNullOrEmpty(roomLayoutId)){
            _viewSeatWithPaginationRequest.RoomLayoutId = Guid.Parse(roomLayoutId);

        }

        var result = await _seatRepo.GetAllActive(_viewSeatWithPaginationRequest);
        _lstSeat = result.Data.Data.ToList();

    }
    private async Task OnSelectedRoomLayout(string roomLayout)
    {
        selectedRoomLayoutId = roomLayout;
        await LoadData(roomLayout);
        StateHasChanged();
    }
}
