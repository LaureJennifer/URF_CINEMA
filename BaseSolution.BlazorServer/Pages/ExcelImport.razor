@page "/ExcelImport"
@using BaseSolution.Application.DataTransferObjects.RoomLayout
@using BaseSolution.Application.DataTransferObjects.RoomLayout.Request
@using BaseSolution.Application.Interfaces.Services
@using BaseSolution.Application.ViewModels.Excels.Mics
@using BaseSolution.BlazorServer.Components
@using BaseSolution.BlazorServer.Components.Excel
@using BaseSolution.Domain.Entities
@using Microsoft.AspNetCore.Components.Web
@using System.Data;
@using System.IO;
@using OfficeOpenXml
<MudText Color="Color.Primary" Class="mb-5" Typo="Typo.h4">Trang chủ</MudText>
 <InputFile OnChange="@ImportExcelFile" />
<MudGrid >
    <MudItem xs="3" lg="3" md="3"></MudItem>
    <MudItem xs="6" lg="6" md="6">
        <MudStack Row="true">
            @foreach (DataColumn col in dt.Columns)
            {
                if (!string.IsNullOrEmpty(col.ColumnName))
                {
                    <MudItem xs="3" lg="3" md="3">
                        <MudPaper Style="width:auto;text-align:center;" Square="true" Class="pa-1 mt-5">@col.ColumnName</MudPaper>
                    </MudItem>
                }
                else
                {
                    <MudItem xs="3" lg="3" md="3">
                        <MudPaper Style="width:auto;" Square="true" Class="mt-5 invisible">@col.ColumnName</MudPaper>
                    </MudItem>
                }
            }
        </MudStack>
            @foreach (DataRow row in dt.Rows)
            {
                <MudStack Row="true">
                    @foreach (DataColumn col in dt.Columns)
                    {
                        var cellValue = row[col.ColumnName]?.ToString();
                        if (!string.IsNullOrEmpty(cellValue))
                        {
                            <MudItem xs="3" lg="3" md="3">
                            <MudPaper Style="width:auto;text-align:center;" Square="true" Class="pa-1 mt-5">@cellValue</MudPaper>
                            </MudItem>
                        }
                        else
                        {
                            <MudItem xs="3" lg="3" md="3">
                                <MudPaper Style="width:auto;visibility:hidden;" Square="true" Class="mt-5">@cellValue</MudPaper>
                            </MudItem>
                        }
                    }
                </MudStack>
            }
    </MudItem>
    <MudItem xs="3" lg="3" md="3"></MudItem>
</MudGrid>
@code {
    DataTable dt = new DataTable();
    async Task ImportExcelFile(InputFileChangeEventArgs e)
    {
        var fileStream = e.File.OpenReadStream();
        var ms = new MemoryStream();
        await fileStream.CopyToAsync(ms);
        fileStream.Close();
        ms.Position = 0;

        using (var package = new ExcelPackage(ms))
        {
            ExcelWorksheet worksheet = package.Workbook.Worksheets[0];
            worksheet = TrimWorksheet(worksheet);
            var rl = new List<string>();

            int cc = worksheet.Dimension.Columns;
            for (var j = 1; j <= cc; j++)
            {
                var cellValue = worksheet.Cells[1, j].Value?.ToString();
                dt.Columns.Add(cellValue);
            }

            for (var j = 2; j <= worksheet.Dimension.Rows; j++)
            {
                for (var i = 1; i <= cc; i++)
                {
                    var cellValue = worksheet.Cells[j, i].Value?.ToString();
                    rl.Add(cellValue);
                }

                if (rl.Count > 0)
                {
                    dt.Rows.Add(rl.ToArray());
                }

                rl.Clear();
            }
        }
    }
    private ExcelWorksheet TrimWorksheet(ExcelWorksheet worksheet)
    {
        int lastRow = worksheet.Dimension.End.Row;
        int lastColumn = worksheet.Dimension.End.Column;

        // Remove blank rows
        for (int row = lastRow; row >= 2; row--)
        {
            bool isRowEmpty = true;
            for (int col = 1; col <= lastColumn; col++)
            {
                var cellValue = worksheet.Cells[row, col].Value;
                if (cellValue != null)
                {
                    isRowEmpty = false;
                    break;
                }
            }

            if (isRowEmpty)
            {
                worksheet.DeleteRow(row);
            }
        }

        // Remove blank columns
        for (int col = lastColumn; col >= 1; col--)
        {
            bool isColumnEmpty = true;
            for (int row = 2; row <= lastRow; row++)
            {
                var cellValue = worksheet.Cells[row, col].Value;
                if (cellValue != null)
                {
                    isColumnEmpty = false;
                    break;
                }
            }

            if (isColumnEmpty)
            {
                worksheet.DeleteColumn(col);
            }
        }

        return worksheet;
    }
}
