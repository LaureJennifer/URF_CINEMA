@page "/ExcelImport"
@using BaseSolution.Application.DataTransferObjects.RoomLayout
@using BaseSolution.Application.DataTransferObjects.RoomLayout.Request
@using BaseSolution.Application.Interfaces.Services
@using BaseSolution.Application.ViewModels.Excels.Mics
@using BaseSolution.BlazorServer.Components
@using BaseSolution.BlazorServer.Components.Excel
@using BaseSolution.Domain.Entities
@using Microsoft.AspNetCore.Components.Web
@using System.Data;
@using System.IO;
@using OfficeOpenXml

<MudPaper>
    <MudText Typo="Typo.h5" Align="Align.Center">Front of cinema</MudText>
    <MudGrid>
        <MudItem xs="2" md="2"></MudItem>
        <MudItem xs="8" md="8">
        @foreach (DataRow row in dt.Rows)
        {
        <MudStack Row="true" AlignItems="AlignItems.Center" Class="ml-7 mb-2">
                @foreach (DataColumn col in dt.Columns)
                {
                    var cellValue = row[col.ColumnName]?.ToString();
                    if (!string.IsNullOrEmpty(cellValue))
                    {
                        <MudItem xs="3" lg="3" md="3">
                            <MudButton OnClick="()=>ChangeStatus()" Variant="Variant.Filled" Style="width:auto;text-align:center;" Square="true" Class="pa-1 mt-5">@cellValue</MudButton>
                            </MudItem>
                    }
                    else
                    {
                        <MudItem xs="3" lg="3" md="3">
                            <MudButton Style="width:auto;visibility:hidden;" Square="true" Class="mt-5">@cellValue</MudButton>
                            </MudItem>
                    }
                }
            </MudStack>
        }
        </MudItem>
        <MudItem xs="2" md="2"></MudItem>
    </MudGrid>
</MudPaper>
@code {
    DataTable dt = new DataTable();
    protected async override Task OnInitializedAsync()
    {
        string path = @"C:\Users\GIGABYTE\Desktop\Map2.xlsx";
        await ImportExcelFile(path);
    }
    public async Task ChangeStatus()
    {

    }
    async Task ImportExcelFile(string filePath)
    {
        ExcelPackage.LicenseContext = LicenseContext.NonCommercial;

        using (var fileStream = new FileStream(filePath, FileMode.Open, FileAccess.Read))
        {
            var ms = new MemoryStream();
            await fileStream.CopyToAsync(ms);
            ms.Position = 0;

            using (var package = new ExcelPackage(ms))
            {
                ExcelWorksheet worksheet = package.Workbook.Worksheets[0];
                worksheet = TrimWorksheet(worksheet);
                var rl = new List<string>();

                int columnCount = worksheet.Dimension.Columns;
                for (var j = 1; j <= columnCount; j++)
                {
                    var cellValue = worksheet.Cells[1, j].Value?.ToString();
                    dt.Columns.Add(cellValue);
                }

                var rowCount = worksheet.Dimension.Rows;
                for (var j = 1; j <= rowCount; j++)
                {
                    for (var i = 1; i <= columnCount; i++)
                    {
                        var cellValue = worksheet.Cells[j, i].Value?.ToString();
                        rl.Add(cellValue);
                    }

                    if (rl.Count > 0)
                    {
                        dt.Rows.Add(rl.ToArray());
                    }
                    rl.Clear();
                }
            }
        }
    }
    // async Task ImportExcelFile(InputFileChangeEventArgs e)
    // {
    //     ExcelPackage.LicenseContext = LicenseContext.NonCommercial;
    //     var fileStream = e.File.OpenReadStream();
    //     var ms = new MemoryStream();
    //     await fileStream.CopyToAsync(ms);
    //     fileStream.Close();
    //     ms.Position = 0;

    //     using (var package = new ExcelPackage(ms))
    //     {
    //         ExcelWorksheet worksheet = package.Workbook.Worksheets[0];
    //         worksheet = TrimWorksheet(worksheet);
    //         var rl = new List<string>();

    //         int columnCount = worksheet.Dimension.Columns;
    //         for (var j = 1; j <= columnCount; j++)
    //         {
    //             var cellValue = worksheet.Cells[1, j].Value?.ToString();
    //             dt.Columns.Add(cellValue);
    //         }
    //         var rowCount = worksheet.Dimension.Rows;
    //         for (var j = 1; j <= rowCount; j++)
    //         {
    //             for (var i = 1; i <= columnCount; i++)
    //             {
    //                 var cellValue = worksheet.Cells[j, i].Value?.ToString();
    //                 rl.Add(cellValue);
    //             }

    //             if (rl.Count > 0)
    //             {
    //                 dt.Rows.Add(rl.ToArray());
    //             }
    //             rl.Clear();
    //         }


    //     }
    // }

    private ExcelWorksheet TrimWorksheet(ExcelWorksheet worksheet)
    {
        int lastRow = worksheet.Dimension.End.Row;
        int lastColumn = worksheet.Dimension.End.Column;

        // Remove blank rows
        for (int row = lastRow; row >= 2; row--)
        {
            bool isRowEmpty = true;
            for (int col = 1; col <= lastColumn; col++)
            {
                var cellValue = worksheet.Cells[row, col].Value;
                if (cellValue != null)
                {
                    isRowEmpty = false;
                    break;
                }
            }

            if (isRowEmpty)
            {
                worksheet.DeleteRow(row);
            }
        }

        // Remove blank columns
        for (int col = lastColumn; col >= 1; col--)
        {
            bool isColumnEmpty = true;
            for (int row = 2; row <= lastRow; row++)
            {
                var cellValue = worksheet.Cells[row, col].Value;
                if (cellValue != null)
                {
                    isColumnEmpty = false;
                    break;
                }
            }

            if (isColumnEmpty)
            {
                worksheet.DeleteColumn(col);
            }
        }

        return worksheet;
    }
}
