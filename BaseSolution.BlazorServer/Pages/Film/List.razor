@using BaseSolution.Application.DataTransferObjects.Film
@using BaseSolution.Application.DataTransferObjects.Film.Request
@using BaseSolution.Application.ValueObjects.Common
@using BaseSolution.BlazorServer.Components.Film;
@using BaseSolution.BlazorServer.Repositories.Interfaces
@using BaseSolution.Domain.Entities;

@page "/film/list"
@inject IDialogService _dialogService
@inject ISnackbar _snackbar
@* @attribute [Authorize(Roles = $"{Roles.Admin},{Roles.Staff}")] *@
<MudPaper Class="pa-5">
    <MudText Class="mt-3" Typo="Typo.h4">Danh sách Phim</MudText>
    <MudGrid Class="mb-3">
        <MudItem xs="9" md="9" lg="9">
            <MudButton @onclick="CreateDialog" Variant="MudBlazor.Variant.Filled" Color="Color.Success" Class="mt-3"><MudIcon Icon="@Icons.Material.Filled.AddCircleOutline"></MudIcon>Thêm mới</MudButton>
        </MudItem>
        <MudItem xs="3" md="3" lg="3">
            <MudTextField DebounceInterval="100" OnDebounceIntervalElapsed="OnSearch" @bind-Value="@searchString" Placeholder="Tìm kiếm theo tên" Variant="MudBlazor.Variant.Outlined" Adornment="Adornment.End" AdornmentIcon="@Icons.Material.Filled.Search" />
        </MudItem>
    </MudGrid>
    @if (_lst == null)
    {
        <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
    }
    else
    {
        if (_lst.Count == 0)
        {
            <MudAlert Severity="Severity.Warning">Không có dữ liệu</MudAlert>
        }
        else
        {
            <MudTable Items="@_lst" Class="mt-4 ">
                <HeaderContent>
                    <MudTh>STT</MudTh>
@*                     <MudTh>Mã Phim</MudTh> *@
                    <MudTh>Tên Phim</MudTh>
@*                     <MudTh>Ảnh</MudTh> *@
                    <MudTh>Đạo diễn</MudTh>
@*                     <MudTh>Diễn viên</MudTh> *@
                    <MudTh>Ngôn Ngữ</MudTh>
                    <MudTh>Thể loại</MudTh>
                    <MudTh>Ngày khởi chiếu</MudTh>
                    <MudTh>Thời Lượng</MudTh>
                    <MudTh>Định dạng phim</MudTh>
                    <MudTh>Độ tuổi</MudTh>
                    <MudTh>Chức năng</MudTh>
                </HeaderContent>
                <RowTemplate>
                    <MudTd DataLabel="Stt">@(_lst.IndexOf(context) + 1)</MudTd>
@*                     <MudTd DataLabel="Mã Phim">@context.Code</MudTd> *@
                    <MudTd DataLabel="Tên Phim">@context.Title</MudTd>
@*                     <MudTd DataLabel="Ảnh">
                        <MudAvatar>
                            <MudImage Src="@context.UrlImage"></MudImage>
                        </MudAvatar>
                    </MudTd> *@
                    <MudTd DataLabel="Đạo diễn">@context.DirectedBy</MudTd>
@*                     <MudTd DataLabel="Diễn viên">@context.Actor</MudTd> *@
                    <MudTd DataLabel="Ngôn Ngữ">@context.Language</MudTd>
                    <MudTd DataLabel="Thể loại">@context.Genres</MudTd>
                    <MudTd DataLabel="Ngày khởi chiếu">@context.ReleaseDate.ToString("dd/MM/yyyy")</MudTd>
                    <MudTd DataLabel="Thời lượng">@context.Duration</MudTd>
                    <MudTd DataLabel="Định dạng phim">@context.Script</MudTd>
                    <MudTd DataLabel="Độ tuổi">@context.AgeRating</MudTd>
                    <MudTd>
                        <MudIconButton OnClick="@(async()=> await UpdateDialog(context.Id))" Variant="MudBlazor.Variant.Filled" Color="Color.Warning" Icon="@Icons.Material.Filled.BorderColor"></MudIconButton>
                        <MudIconButton OnClick="(async()=> await OnDeleteClicked(context.Id))" Variant="MudBlazor.Variant.Filled" Color="Color.Error" Icon="@Icons.Material.Filled.Delete"></MudIconButton>
                    </MudTd>
                </RowTemplate>
                <PagerContent>
                    <MudTablePager />
                </PagerContent>
            </MudTable>
            <MudMessageBox @ref="_mbox" Title="Xác nhận" CancelText="Hủy">
                <MessageContent>
                    Xác nhận xóa phim!
                </MessageContent>
                <YesButton>
                    <MudButton Color="Color.Primary" OnClick="OnConfirmDelete">
                        Xác nhận
                    </MudButton>
                </YesButton>
            </MudMessageBox>
        }
    }
</MudPaper>

@code {
    [Inject]
    public IFilmRepo _filmRepo { get; set; }

    public List<FilmDto>? _lst { get; set; }

    public ViewFilmWithPaginationRequest obj = new() { PageSize = int.MaxValue - 1 };
    public FilmDeleteRequest _filmDelete = new();

    string searchString = string.Empty;

    MudMessageBox _mbox { get; set; }

    private async Task CreateDialog()
    {
        MudBlazor.DialogOptions closeOnEscapeKey = new MudBlazor.DialogOptions() { CloseOnEscapeKey = true };

        _dialogService.Show<Create>("Thêm mới phim", closeOnEscapeKey);
        await LoadData(string.Empty);
        StateHasChanged();
    }

    private async Task UpdateDialog(Guid Id)
    {
        var parameters = new DialogParameters<Update>();
        parameters.Add(x => x.idFilm, Id);
        var dialog = await _dialogService.ShowAsync<Update>("Sửa thông tin phim", parameters);
        var result = await dialog.Result;
        if (!result.Canceled)
        {
            await LoadData(string.Empty);
            StateHasChanged();
        }
    }

    private async Task OnDeleteClicked(Guid Id)
    {
        var user = await _filmRepo.GetByIdAsync(Id);
        var data = user.Data;
        _filmDelete.Id = data.Id;
        _filmDelete.DeletedTime = DateTime.Now;
        bool? result = await _mbox.Show();
        StateHasChanged();
    }

    public async Task OnConfirmDelete()
    {
        var removeConfirm = await _filmRepo.RemoveAsync(_filmDelete);
        if (removeConfirm.Success)
        {
            _snackbar.Add("Xóa thành công", Severity.Success);
        }
        else
        {
            _snackbar.Add("Xóa thất bại" + removeConfirm.Errors, Severity.Error);
        }
        await Task.Delay(2000);
        await LoadData(string.Empty);
        StateHasChanged();
    }

    protected override async Task OnInitializedAsync()
    {
        await LoadData(string.Empty);
    }


    private async Task LoadData(string name)
    {
        if (!string.IsNullOrEmpty(name))
        {
            obj.Title = name;

        }
        else obj.Title = string.Empty;

        var result = await _filmRepo.GetAllActive(obj);
        _lst = result.Data.Data.ToList();
        StateHasChanged();
    }

    async Task OnSearch(string debouncedText)
    {
        await LoadData(debouncedText);
    }
}