@using BaseSolution.Application.DataTransferObjects.User
@using BaseSolution.Application.DataTransferObjects.User.Request
@using BaseSolution.BlazorServer.Components.User;
@inject IDialogService DialogService
@inject ISnackbar _snackbar
@page "/listuser"
@using BaseSolution.BlazorServer.Repositories.Interfaces
@using BaseSolution.Domain.Entities;
<MudGrid>
    <MudItem xs="8">
        <MudText Class="mt-3" Typo="Typo.h4">Danh sách nhân viên</MudText>
    </MudItem>
    <MudItem xs="4">
        <MudTextField @bind-Value="searchString" Label="Tìm kiếm" Adornment="Adornment.End" AdornmentIcon="@Icons.Material.Filled.Search" AdornmentColor="Color.Secondary" />
    </MudItem>
</MudGrid>
<MudButton @onclick="CreateDialog" Variant="Variant.Filled" Color="Color.Success" Class="mt-3"><MudIcon Icon="@Icons.Material.Filled.AddCircleOutline"></MudIcon>Thêm mới</MudButton>
@if (_lst == null)
{
    <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
}
else
{
    if (_lst.Count == 0)
    {
        <MudAlert Severity="Severity.Warning" >Không có dữ liệu</MudAlert>
    }
    else
    {
        <MudTable Items="@_lst" Class="mt-4" Hover="true" FixedHeader="true">
            <HeaderContent>
                <MudTh>STT</MudTh>
                <MudTh>Mã nhân viên</MudTh>
                <MudTh>Ảnh</MudTh>
                <MudTh>Họ và tên</MudTh>
                <MudTh>Số điện thoại</MudTh>
                <MudTh>Email</MudTh>
                <MudTh>Hành động</MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd DataLabel="Stt">@(_lst.IndexOf(context) + 1)</MudTd>
                <MudTd DataLabel="Mã nhân viên">@context.Code</MudTd>
                <MudTd DataLabel="Ảnh">
                    <MudAvatar>
                        <MudImage Src="@context.UrlImage"></MudImage>
                    </MudAvatar>
                </MudTd>
                <MudTd DataLabel="Họ và Tên">@context.Name</MudTd>
                <MudTd DataLabel="Số điện thoại">@context.PhoneNumber</MudTd>
                <MudTd DataLabel="Email">@context.Email</MudTd>
                <MudTd>
                    <MudIconButton @onclick="()=>UpdateDialog(context.Id)" Variant="Variant.Filled" Color="Color.Warning" Icon="@Icons.Material.Filled.BorderColor"></MudIconButton>
                    <MudIconButton @onclick="()=>OnDeleteClicked(context.Id)" Variant="Variant.Filled" Color="Color.Error" Icon="@Icons.Material.Filled.Delete"></MudIconButton>
                </MudTd>
            </RowTemplate>
            <PagerContent>
                <MudTablePager />
            </PagerContent>
        </MudTable>
        <MudMessageBox @ref="_mbox" Title="Xác nhận" CancelText="Hủy">
            <MessageContent>
                Xác nhận xóa nhân viên!
            </MessageContent>
            <YesButton>
                <MudButton Color="Color.Primary" OnClick="OnConfirmDelete">
                    Xác nhận
                </MudButton>
            </YesButton>
        </MudMessageBox>
    }
}
@code {
    string searchString = string.Empty;
    [Inject]
    public IUserRepositories _user{ get; set; }
    public List<UserDto>? _lst { get; set; }
    PaginationRequest _paginationRequest = new();
    public ViewUserWithPaginationRequest obj = new();
    public UserDeleteRequest UserDelete = new();
    MudMessageBox _mbox { get; set; }
    PaginationResponse<string>? _paginationResponse { get; set; } = new();
    private async Task CreateDialog()
    {
        DialogOptions closeOnEscapeKey = new DialogOptions() { CloseOnEscapeKey = true };

        DialogService.Show<Create>("Thêm mới nhân viên", closeOnEscapeKey);
        await LoadData();
    }
    private async Task UpdateDialog(Guid Id)
    {
        var parameters = new DialogParameters();
        parameters.Add("IdUser", Id);
        DialogOptions closeOnEscapeKey = new DialogOptions() { CloseOnEscapeKey = true };

        DialogService.Show<Update>("Sửa thông tin nhân viên", closeOnEscapeKey);
        await LoadData();
    }

    private async Task OnDeleteClicked(Guid Id)
    {
        var user_ = await _user.GetByIdAsync(Id);
        var data = user_.Data;
        UserDelete.Id = data.Id;
        UserDelete.DeletedTime = DateTime.Now;
        UserDelete.DeletedBy = null;
        StateHasChanged();
    }
    private async Task OnConfirmDelete()
    {
        var obj = await _user.RemoveAsync(UserDelete);

        if (obj.Success)
        {
            _snackbar.Add("Xóa thành công!", Severity.Success);
            await LoadData();
        }

        else
            _snackbar.Add("Xóa thất bại !" + obj.Errors, Severity.Error);
        await Task.Delay(2000);
        await LoadData();

    }
    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }
    private async Task LoadData()
    {

        var result = await _user.GetAllActive(obj);
        _lst = result.Data.Data.ToList();
    }

}
