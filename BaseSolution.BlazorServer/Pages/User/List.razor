@using BaseSolution.Application.DataTransferObjects.User
@using BaseSolution.Application.DataTransferObjects.User.Request
@using BaseSolution.Application.ValueObjects.Common
@using BaseSolution.BlazorServer.Components.User;
@using BaseSolution.BlazorServer.Repositories.Interfaces
@using BaseSolution.Domain.Entities;
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@using System.Security.Claims

@page "/user/list"
@inject IDialogService _dialogService
@inject ISnackbar _snackbar
@inject AuthenticationStateProvider _authProvider;
@inject ProtectedSessionStorage _session;
@attribute [Authorize(Roles = $"{Roles.Admin},{Roles.Staff}")]

<MudPaper Class="pa-5">
    <MudText Class="mt-3" Typo="Typo.h4">Danh sách nhân viên</MudText>
    <MudGrid>
        <MudItem xs="8">
            <MudButton @onclick="CreateDialog" Variant="Variant.Filled" Color="Color.Success" Class="mt-3"><MudIcon Icon="@Icons.Material.Filled.AddCircleOutline"></MudIcon>Thêm mới</MudButton>
        </MudItem>
        <MudItem xs="4">
            <MudInput Value="@searchString" ValueChanged="(string str)=>OnSearch(str)" Placeholder="Tìm kiếm theo mã" Adornment="Adornment.End" AdornmentIcon="@Icons.Material.Filled.Search" Class="ml-5 mt-2"></MudInput>
        </MudItem>
    </MudGrid>
    @if (_lst == null)
    {
        <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
    }
    else
    {
        if (_lst.Count == 0)
        {
            <MudAlert Severity="Severity.Warning" >Không có dữ liệu</MudAlert>
        }
        else
        {
            <MudTable Items="@_lst" Class="mt-4" Hover="true" FixedHeader="true">
                <HeaderContent>
                    <MudTh>STT</MudTh>
                    <MudTh>Mã nhân viên</MudTh>
                    <MudTh>Ảnh</MudTh>
                    <MudTh>Họ và tên</MudTh>
                    <MudTh>Số điện thoại</MudTh>
                    <MudTh>Email</MudTh>
                    <MudTh>Hành động</MudTh>
                </HeaderContent>
                <RowTemplate>
                    <MudTd DataLabel="Stt">@(_lst.IndexOf(context) + 1)</MudTd>
                    <MudTd DataLabel="Mã nhân viên">@context.Code</MudTd>
                    <MudTd DataLabel="Ảnh">
                        <MudAvatar>
                            <MudImage Src="@context.UrlImage"></MudImage>
                        </MudAvatar>
                    </MudTd>
                    <MudTd DataLabel="Họ và Tên">@context.Name</MudTd>
                    <MudTd DataLabel="Số điện thoại">@context.PhoneNumber</MudTd>
                    <MudTd DataLabel="Email">@context.Email</MudTd>
                    <MudTd>
                        <MudIconButton OnClick="@(async()=> await UpdateDialog(context.Id))" Variant="Variant.Filled" Color="Color.Warning" Icon="@Icons.Material.Filled.BorderColor"></MudIconButton>
                        <MudIconButton OnClick="(async()=> await OnDeleteClicked(context.Id))" Variant="Variant.Filled" Color="Color.Error" Icon="@Icons.Material.Filled.Delete"></MudIconButton>
                    </MudTd>
                </RowTemplate>
                <PagerContent>
                    <MudTablePager />
                </PagerContent>
            </MudTable>   
        }
    }
</MudPaper>
<MudMessageBox @ref="_mbox" Title="Xác nhận" CancelText="Hủy">
    <MessageContent>
        Xác nhận xóa nhân viên!
    </MessageContent>
    <YesButton>
        <MudButton Color="Color.Primary" OnClick="OnConfirmDelete">
            Xác nhận
        </MudButton>
    </YesButton>
</MudMessageBox>
@code {
    [Inject]
    public IUserRepo _userRepo{ get; set; }

    public List<UserDto>? _lst { get; set; }

    public ViewUserWithPaginationRequest obj = new() { PageSize = int.MaxValue - 1 };
    public UserDeleteRequest _userDelete = new();

    string searchString = "";

    MudMessageBox _mbox { get; set; }

    private async Task CreateDialog()
    {
        DialogOptions closeOnEscapeKey = new DialogOptions() { CloseOnEscapeKey = true };

        _dialogService.Show<Create>("Thêm mới nhân viên", closeOnEscapeKey);
        await LoadData(searchString);
    }

    private async Task UpdateDialog(Guid Id)
    {
        var parameters = new DialogParameters<Update>();
        parameters.Add(x => x.idUser, Id);
        var dialog = await _dialogService.ShowAsync<Update>("Sửa thông tin nhân viên", parameters);
        var result = await dialog.Result;
        if (!result.Canceled)
        {
            await LoadData(searchString);
        }
    }

    private List<string> _lstrole = new();

    private async Task OnDeleteClicked(Guid Id)
    {
        var user = await _userRepo.GetByIdAsync(Id);
        var data = user.Data;
        _userDelete.Id = data.Id;
        _userDelete.DeletedTime = DateTime.Now;
        bool? result = await _mbox.Show();
        StateHasChanged();
    }

    public async Task OnConfirmDelete()
    {
        var removeConfirm = await _userRepo.RemoveAsync(_userDelete);
        if (removeConfirm.Success)
        {
            _snackbar.Add("Xóa thành công", Severity.Success);
        }
        else
        {
            _snackbar.Add("Xóa thất bại" + removeConfirm.Errors, Severity.Error);
        }
        await Task.Delay(2000);
        await LoadData(searchString);
    }

    protected override async Task OnInitializedAsync()
    {
        await LoadData(searchString);

    }

    private async Task LoadData(string textSearch)
    {

        obj.Code = textSearch;

        var result = await _userRepo.GetAllActive(obj);
        _lst = result.Data.Data.ToList();

    }
    private async Task OnSearch(string textSearch)
    {
        await LoadData(textSearch);
        StateHasChanged();
    }
}
