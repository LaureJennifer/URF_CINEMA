@page "/ticket/list"
@using BaseSolution.Application.DataTransferObjects.Ticket
@using BaseSolution.Application.DataTransferObjects.Ticket.Request
@using BaseSolution.BlazorServer.Components.Ticket;
@using BaseSolution.BlazorServer.Repositories.Interfaces
@using BaseSolution.Domain.Entities;


@inject IDialogService _dialogService
@inject ISnackbar _snackbar

<MudPaper Class="pa-5">
    <MudGrid>
        <MudItem xs="8">
            <MudText Class="mt-3" Typo="Typo.h4">Danh sách Vé</MudText>
        </MudItem>
        <MudItem xs="4">
            <MudTextField @bind-Value="searchString" Placeholder="Tìm kiếm" Adornment="Adornment.End" AdornmentIcon="@Icons.Material.Filled.Search" AdornmentColor="Color.Secondary"/>
        </MudItem>
    </MudGrid>

    <MudButton @onclick="CreateDialog" Variant="Variant.Filled" Color="Color.Success" Class="mt-3"><MudIcon Icon="@Icons.Material.Filled.AddCircleOutline"></MudIcon>Thêm mới</MudButton>

    @if (_lst == null)
    {
        <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
    }
    else
    {
        if (_lst.Count == 0)
        {
            <MudAlert Severity="Severity.Warning">Không có dữ liệu</MudAlert>
        }
        else
        {
            <MudTable Items="@_lst" Class="mt-4 ">
                <HeaderContent>
                    <MudTh>STT</MudTh>
                    <MudTh>Mã Vé</MudTh>
                    <MudTh>Tên phim</MudTh>
                    <MudTh>Phòng</MudTh>
                    <MudTh>Ghế ngồi</MudTh>
                    <MudTh>Ngày chiếu</MudTh>
                    <MudTh>Giờ chiếu</MudTh>
                    <MudTh>Trạng Thái</MudTh>
                    <MudTh>Chức năng</MudTh>
                </HeaderContent>
                <RowTemplate>
                    <MudTd DataLabel="Stt">@(_lst.IndexOf(context) + 1)</MudTd>
                    <MudTd DataLabel="Mã Vé">@context.Code</MudTd>
                    <MudTd DataLabel="Tên phim">@context.FilmName</MudTd>
                    <MudTd DataLabel="Phòng">@context.RoomCode</MudTd>
                    <MudTd DataLabel="Ghế ngồi">@context.SeatCode</MudTd>
                    <MudTd DataLabel="Ngày chiếu">@context.ShowDate.ToString("dd/MM/yyyy")</MudTd>
                    <MudTd DataLabel="Giờ chiếu">@context.ShowTime.ToString("hh : mm tt")</MudTd>
                    <MudTd DataLabel="Trạng Thái">@context.Status</MudTd>
                    <MudTd>
                        <MudIconButton OnClick="@(async()=> await UpdateDialog(context.Id))" Variant="Variant.Filled" Color="Color.Warning" Icon="@Icons.Material.Filled.BorderColor"></MudIconButton>
                        <MudIconButton OnClick="(async()=> await OnDeleteClicked(context.Id))" Variant="Variant.Filled" Color="Color.Error" Icon="@Icons.Material.Filled.Delete"></MudIconButton>
                    </MudTd>
                </RowTemplate>
                <PagerContent>
                    <MudTablePager />
                </PagerContent>
            </MudTable>
            <MudMessageBox @ref="_mbox" Title="Xác nhận" CancelText="Hủy">
                <MessageContent>
                    Xác nhận xóa vé!
                </MessageContent>
                <YesButton>
                    <MudButton Color="Color.Primary" OnClick="OnConfirmDelete">
                        Xác nhận
                    </MudButton>
                </YesButton>
            </MudMessageBox>
        }
    }
</MudPaper>

@code {
    [Inject]
    public ITicketRepo _ticketRepo { get; set; }

    public List<TicketDto>? _lst { get; set; }

    public ViewTicketWithPaginationRequest obj = new();
    public TicketDeleteRequest _ticketDelete = new();

    string searchString = string.Empty;

    MudMessageBox _mbox { get; set; }

    private async Task CreateDialog()
    {
        DialogOptions closeOnEscapeKey = new DialogOptions() { CloseOnEscapeKey = true };

        _dialogService.Show<Create>("Thêm mới vé", closeOnEscapeKey);
        await LoadData();
    }

    private async Task UpdateDialog(Guid Id)
    {
        var parameters = new DialogParameters<Update>();
        parameters.Add(x => x.idTicket, Id);
        var dialog = await _dialogService.ShowAsync<Update>("Sửa thông tin vé", parameters);
        var result = await dialog.Result;
        if (!result.Canceled)
        {
            await LoadData();
        }
    }

    private async Task OnDeleteClicked(Guid Id)
    {
        var user = await _ticketRepo.GetByIdAsync(Id);
        var data = user.Data;
        _ticketDelete.Id = data.Id;
        _ticketDelete.DeletedTime = DateTime.Now;
        bool? result = await _mbox.Show();
        StateHasChanged();
    }

    public async Task OnConfirmDelete()
    {
        var removeConfirm = await _ticketRepo.RemoveAsync(_ticketDelete);
        if (removeConfirm.Success)
        {
            _snackbar.Add("Xóa thành công", Severity.Success);
        }
        else
        {
            _snackbar.Add("Xóa thất bại" + removeConfirm.Errors, Severity.Error);
        }
        await Task.Delay(2000);
        await LoadData();
    }

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    private async Task LoadData()
    {

        var result = await _ticketRepo.GetAllActive(obj);
        _lst = result.Data.Data.ToList();
    }
}
