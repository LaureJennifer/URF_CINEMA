@using System.Text.RegularExpressions
@using System.ComponentModel.DataAnnotations
@using MudBlazor
@using URF_Cinema.Application.DataTransferObjects.Film
@using URF_Cinema.Application.DataTransferObjects.FilmDetail
@using URF_Cinema.Application.DataTransferObjects.FilmDetail.Request
@using URF_Cinema.Application.DataTransferObjects.FilmSchedule
@using URF_Cinema.Application.DataTransferObjects.FilmSchedule.Request
@using URF_Cinema.Application.DataTransferObjects.FilmScheduleRoom.Request
@using URF_Cinema.Application.DataTransferObjects.Room
@using URF_Cinema.Application.DataTransferObjects.Room.Request
@using URF_Cinema.Manage.Repositories.Interfaces
@using URF_Cinema.Domain.Entities
@using URF_Cinema.Domain.Enums
@using static MudBlazor.CategoryTypes
@inject IDialogService DialogService
@inject ISnackbar _snackbar
@inject NavigationManager _navigate;
@if (_film != null)
{
    <MudDialog>
        <DialogContent>
            <MudGrid>

                <MudItem xs="12" sm="12" md="12">
                    <MudTextField @bind-Value="@_film.Title"></MudTextField>
                </MudItem>
                <MudItem xs="6" sm="6" md="6">
                    <MudTextField T="DateTime" Format="s" @bind-Value="@_showDate" Label="Thời gian chiếu" InputType="InputType.DateTimeLocal" />
                </MudItem>
             
                <MudItem xs="12" md="12">
                    <MudSelect Placeholder="Trạng thái*" T="EntityStatus" AnchorOrigin="Origin.BottomCenter" @bind-Value="_filmScheduleDto.Status" For="@(() => _filmScheduleDto.Status)">
                        <MudSelectItem Value="EntityStatus.Active">Hoạt động</MudSelectItem>
                        <MudSelectItem Value="EntityStatus.InActive">Không hoạt động</MudSelectItem>
                        <MudSelectItem Value="EntityStatus.PendingForActivation">Chờ hoạt động</MudSelectItem>
                        <MudSelectItem Value="EntityStatus.Deleted">Đã xóa</MudSelectItem>
                    </MudSelect>
                </MudItem>
                <MudItem xs="12" sm="12" md="12">
                    <MudText Class="mb-3">Danh sách phòng chiếu :</MudText>
                    <MudGrid>
                        @foreach (var room in _lstRoomByDepartment)
                        {
                            if (!lstRoomId.Contains(room.Id))
                            {
                                <MudCheckBox T="bool" ValueChanged="@((bool e) => HandleCheckBoxCheckedChanged(room.Id, e))">@room.Code</MudCheckBox>
                            }
                            else
                            {
                                <MudCheckBox T="bool" Value="@lstRoomId.Contains(room.Id)" ValueChanged="@((bool e)  => HandleCheckBoxCheckedChanged(room.Id, e))">@room.Code</MudCheckBox>
                            }
                           
                            
                        }
                    </MudGrid>
                </MudItem>
            </MudGrid>
        </DialogContent>
        <DialogActions>
            <MudButton Color="Color.Error" OnClick="Cancel">Hủy</MudButton>
            <MudButton Color="Color.Primary" OnClick="OnButtonClicked">Chỉnh sửa</MudButton>
        </DialogActions>
    </MudDialog>
}

@code {

    private List<Guid> _lstSelectedRoomId = new List<Guid>();
    [Inject] IFilmScheduleRoomRepo _filmScheduleRoomRepo { get; set; }
    [Inject] IDialogService _dialogService { get; set; } = null!;
    [Inject] IFilmDetailRepo _filmDetailRepo { get; set; }
    [Inject] IFilmRepo _filmRepo { get; set; }
    [Inject] IFilmScheduleRepo _filmScheduleRepo { get; set; }
    FilmDto? _film { get; set; } = new();
    FilmScheduleDto? _filmSchedule { get; set; } = new();
    [CascadingParameter] MudDialogInstance MudDialog { get; set; }
    public FilmDetailDto filmDetail = new();
    [Inject] public IRoomRepo _roomRepo { get; set; }
    List<RoomDto> _lstRoomByDepartment { get; set; } = new();
    [Parameter] public Guid idDepartment { get; set; }
    [Parameter] public Guid idFilm { set; get; }
    public List<Guid> lstRoomId { get; set; } = new();
    public FilmScheduleDto _filmScheduleDto = new();
    [Parameter] public Guid idFilmSchedule { set; get; }
    MudForm from;
    bool checkBox { get; set; } = false;
    ViewFilmScheduleRoomWithPaginationRequest _viewFilmScheduleRoomWithPaginationRequest = new(){PageSize=int.MaxValue-1};
    ViewFilmScheduleRoomWithPaginationRequest _viewFilmScheduleRoomForCheckExist = new() { PageSize = int.MaxValue - 1 };

    ViewRoomWithPaginationRequest _viewRoomWithPaginationRequest = new();
    ViewFilmScheduleWithPaginationRequest _viewFilmScheduleWithPaginationRequest = new() { PageSize = int.MaxValue - 1 };
    ViewFilmScheduleWithPaginationRequest _viewFilmScheduleForCheckExist = new() { PageSize = int.MaxValue - 1 };
    DateTime _showDate { get; set; }
    MudTimePicker _timePicker;
    FilmDetailCreateRequest _filmDetailCreateRequest = new();
    void Submit() => MudDialog.Close(DialogResult.Ok(true));
    void Cancel() => MudDialog.Cancel();
    FilmScheduleCreateRequest _filmScheduleCreateRequest = new();
    Guid filmScheduleId { get; set; }
    [Inject] private IDialogService dialogService { get; set; }
    bool checkResultCreateAll { get; set; } = false;
    Guid idFilmShedule { get; set; }
    FilmScheduleUpdateRequest _filmScheduleUpdateRequest = new();

    protected override async Task OnInitializedAsync()
    {

        await LoadFilmById(idFilm.ToString());
        await LoadFilmScheduleById(idFilmSchedule);
        await LoadRoomByDepartment(idDepartment.ToString());
        await LoadRoomByFilmScheduleId(idFilmSchedule);
    }

    private async void OnButtonClicked()
    {

        bool? rs = await _dialogService.ShowMessageBox(
     "Xác nhận",
     "Bạn có chắc chắn Chỉnh sửa?",
     yesText: "Xác nhận", cancelText: "Hủy");
        if (rs == true)
        {
            await UpdateFilmSchedule();
            if (checkResultCreateAll)
            {
                _snackbar.Add("Chỉnh sửa lịch chiếu thành công!", Severity.Success);
                await Task.Delay(60);
                MudDialog.Close(DialogResult.Ok(true));
                StateHasChanged();
                _navigate.NavigateTo("/filmschedule/list", forceLoad: true);
            }
            else
            {
                _snackbar.Add("Chỉnh sửa lịch chiếu thất bại!", Severity.Error);
            }

        }

    }

    private async void HandleCheckBoxCheckedChanged(Guid roomId, bool isChecked)
    {
        if (lstRoomId.Contains(roomId))
        {
            isChecked = false;
            lstRoomId.Remove(roomId);

            ViewFilmScheduleRoomWithPaginationRequest rq = new()
                {
                    RoomId = roomId,
                    FilmScheduleId = _filmSchedule.Id,
                };
            var rs = await _filmScheduleRoomRepo.GetFilmScheduleRoomByRoomAsync(rq);
            var result = rs.Data.Data.First().Id;
            if (result!=null)
            {
                FilmScheduleRoomDeleteRequest rquest = new()
                    {
                        Id = result
                    };
               var removeRs = await _filmScheduleRoomRepo.RemoveAsync(rquest);
               
            }
            
        }
        else
        if (isChecked)
        {            

            if (!_lstSelectedRoomId.Contains(roomId))
            {
                _lstSelectedRoomId.Add(roomId);
            }
        }
        else
        {
            _lstSelectedRoomId.Remove(roomId);
        }

    }

    async Task UpdateFilmSchedule()
    {
        DateTimeOffset showDateTime = new DateTimeOffset(_showDate, TimeZoneInfo.Local.GetUtcOffset(_showDate));

        _viewFilmScheduleForCheckExist.ShowDate = showDateTime;
        _viewFilmScheduleForCheckExist.ShowTime = showDateTime;
        var result = await _filmScheduleRepo.GetByShowDateTime(_viewFilmScheduleForCheckExist);
        var filmSchedule = result.Data.Data.ToList();
        if (filmSchedule.Count>0)
        {
            idFilmShedule = filmSchedule.First().Id;
            _filmScheduleUpdateRequest.Id = idFilmShedule;
            _filmScheduleUpdateRequest.Status = _filmScheduleDto.Status;
            _filmScheduleUpdateRequest.ShowDate = showDateTime;
            _filmScheduleUpdateRequest.ShowTime = showDateTime;
            var rs = await _filmScheduleRepo.UpdateAsync(_filmScheduleUpdateRequest);
            if (rs)
            {
                checkResultCreateAll = true;
                await UpdateRangeFilmScheduleRoom(idFilmShedule);
            }
            else
            {
                checkResultCreateAll = false;
            }
        }
        else
        {
            await CreateFilmSchedule();
            checkResultCreateAll = true;
        }

    }

    async Task UpdateRangeFilmScheduleRoom(Guid idFilmShedule)
    {
        // tìm xem nếu có FilmScheduleRoom rồi thì thôi còn chưa thì tạo mới

        foreach (var roomId in _lstSelectedRoomId)
        {
            _viewFilmScheduleRoomForCheckExist.FilmScheduleId = idFilmShedule;
            _viewFilmScheduleRoomForCheckExist.RoomId = roomId;
            var resultCheck = await _filmScheduleRoomRepo.GetFilmScheduleRoomByRoomAsync(_viewFilmScheduleRoomForCheckExist);
            var data = resultCheck.Data.Data.ToList();
            if (data.Count() <= 0)
            {
                FilmScheduleRoomCreateRequest filmScheduleRoomCreateRequest = new()
                    {
                        FilmScheduleId = idFilmShedule,
                        RoomId = roomId
                    };
                var result = await _filmScheduleRoomRepo.AddAsync(filmScheduleRoomCreateRequest);
                if (result)
                {
                    checkResultCreateAll = true;
                }
                else
                    checkResultCreateAll = false;
            }

        }
    }

    async Task CreateFilmSchedule()
    {
        DateTimeOffset showDateTime = new DateTimeOffset(_showDate, TimeZoneInfo.Local.GetUtcOffset(_showDate));
        _filmScheduleCreateRequest.ShowDate = showDateTime;
        _filmScheduleCreateRequest.ShowTime = showDateTime;
        var result = await _filmScheduleRepo.AddAsync(_filmScheduleCreateRequest);
        if (result)
        {
            checkResultCreateAll = true;
            await CreateFilmDetail();
        }
        else
            checkResultCreateAll = false;
    }

    async Task CreateFilmDetail()
    {
        //Get FilmScheduleId
        _viewFilmScheduleWithPaginationRequest.ShowDate = _filmScheduleCreateRequest.ShowDate;
        _viewFilmScheduleWithPaginationRequest.ShowTime = _filmScheduleCreateRequest.ShowTime;
        var result = await _filmScheduleRepo.GetByShowDateTime(_viewFilmScheduleWithPaginationRequest);
        filmScheduleId = result.Data!.Data!.First().Id;

        _filmDetailCreateRequest.FilmId = idFilm;
        _filmDetailCreateRequest.FilmScheduleId = filmScheduleId;
        var createResult = await _filmDetailRepo.AddAsync(_filmDetailCreateRequest);
        if (createResult)
        {
            checkResultCreateAll = true;
            if (_lstSelectedRoomId.Count > 0)
            {
                await CreateRangeFilmScheduleRoom();
            }
        }
        else
            checkResultCreateAll = false;

    }

    List<FilmScheduleRoomCreateRangeRequest> _lstFilmScheduleRoomCreateRangeRequests = new();
    async Task CreateRangeFilmScheduleRoom()
    {
        foreach (var roomId in _lstSelectedRoomId)
        {
            FilmScheduleRoomCreateRangeRequest filmScheduleRoomCreateRangeRequest = new()
                {
                    FilmScheduleId = filmScheduleId,
                    RoomId = roomId
                };
            _lstFilmScheduleRoomCreateRangeRequests.Add(filmScheduleRoomCreateRangeRequest);
        }

        var result = await _filmScheduleRoomRepo.AddRangeAsync(_lstFilmScheduleRoomCreateRangeRequests);
        if (result)
        {
            checkResultCreateAll = true;
        }
        else
            checkResultCreateAll = false;

    }

    async Task LoadRoomByFilmScheduleId(Guid idFilmSchedule)
    {
        _viewFilmScheduleRoomWithPaginationRequest.FilmScheduleId = idFilmSchedule;
        var result = await _filmScheduleRoomRepo.GetFilmScheduleRoomByRoomAsync(_viewFilmScheduleRoomWithPaginationRequest); // get room by film schedule
        var listRoomByFilmSchedule = result.Data.Data.ToList();
        foreach (var room in listRoomByFilmSchedule)
        {
            if (_lstRoomByDepartment.Select(x => x.Id).Contains(room.RoomId))
            {
                lstRoomId.Add(room.RoomId);
            }
        }
    }
    async Task LoadFilmScheduleById(Guid idFilmSchedule)
    {
        var result = await _filmScheduleRepo.GetFilmScheduleByIdAsync(idFilmSchedule);
        _filmSchedule = result.Data;
        _showDate = _filmSchedule!.ShowTime.ToLocalTime().DateTime;

    }
    async Task LoadFilmById(string idFilm)
    {
        var result = await _filmRepo.GetByIdAsync(Guid.Parse(idFilm));
        _film = result.Data;
    }
    private async Task LoadRoomByDepartment(string idDepartment)
    {
        _viewRoomWithPaginationRequest.PageSize = int.MaxValue-1;
        _viewRoomWithPaginationRequest.DepartmentId = Guid.Parse(idDepartment);
        var result = await _roomRepo.GetRoomByDepartment(_viewRoomWithPaginationRequest);
        _lstRoomByDepartment = result.Data.Data.ToList();
    }


}



