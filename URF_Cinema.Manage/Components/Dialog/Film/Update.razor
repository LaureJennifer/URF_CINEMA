@using System.Text.RegularExpressions
@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Components.Forms
@using MudBlazor
@using URF_Cinema.Application.DataTransferObjects.Film
@using URF_Cinema.Application.DataTransferObjects.Film.Request
@using URF_Cinema.Manage.Data.ValueObjects.Common
@using URF_Cinema.Manage.Repositories.Interfaces
@using URF_Cinema.Domain.Entities
@using URF_Cinema.Domain.Enums
@using static MudBlazor.CategoryTypes
@inject IDialogService _dialogService
@inject ISnackbar _snackbar
@inject NavigationManager _navigate;
<MudDialog>
    <DialogContent>
        <MudGrid>
            <MudItem xs="6" sm="6" md="6">
                <MudTextField @bind-Value="_filmDto.Code" Style="visibility:hidden" Required="true" ErrorText="@GetErrorText(_filmDto.Code)" Placeholder="Mã phim*" />
            </MudItem>
            <MudItem xs="6" sm="6" md="6">
                <MudTextField @bind-Value="_filmDto.Title" Required="true" ErrorText="@GetErrorText(_filmDto.Title)" Placeholder="Tên phim*" />
            </MudItem>
            <MudItem xs="6" sm="6" md="6">
                <MudTextField @bind-Value="_filmDto.DirectedBy" Required="true" ErrorText="@GetErrorText(_filmDto.DirectedBy)" Placeholder="Đạo diễn*" />
            </MudItem>
            <MudItem xs="6" sm="6" md="6">
                <MudTextField @bind-Value="_filmDto.Actor" Required="true" ErrorText="@GetErrorText(_filmDto.Actor)" Placeholder="Diễn viên*" />
            </MudItem>
            <MudItem xs="6" sm="6" md="6">
                <MudTextField @bind-Value="_filmDto.Language" Required="true" ErrorText="@GetErrorText(_filmDto.Language)" Placeholder="Ngôn ngữ*" />
            </MudItem>
            <MudItem xs="6" sm="6" md="6">
                <MudTextField @bind-Value="_filmDto.Genres" Required="true" ErrorText="@GetErrorText(_filmDto.Genres)" Placeholder="Thể loại*" />
            </MudItem>
            <MudItem xs="6" sm="6" md="6">
                <MudDatePicker @bind-date="_releaseDate" Required="true" ErrorText="@GetError(_releaseDate)" Placeholder="Ngày khởi chiếu*" />
            </MudItem>
            <MudItem xs="6" sm="6" md="6">
                <MudTextField @bind-Value="_filmDto.Duration" Required="true" ErrorText="@GetErrorText(_filmDto.Duration)" Placeholder="Thời lượng*" />
            </MudItem>
            <MudItem xs="6" sm="6" md="6">
                <MudTextField @bind-Value="_filmDto.Script" Required="true" ErrorText="@GetErrorText(_filmDto.Script)" Placeholder="Định dạng phim*" />
            </MudItem>
            <MudItem xs="6" sm="6" md="6">
                <MudTextField @bind-Value="_filmDto.AgeRating" Required="true" ErrorText="@GetErrorText(_filmDto.AgeRating)" Placeholder="Độ tuổi*" />
            </MudItem>
            <MudItem xs="12" sm="12">
                <MudSelect Placeholder="Trạng thái*" T="EntityStatus" AnchorOrigin="Origin.BottomCenter" @bind-Value="_filmDto.Status" For="@(() => _filmDto.Status)">
                    <MudSelectItem Value="EntityStatus.Active">Hoạt động</MudSelectItem>
                    <MudSelectItem Value="EntityStatus.InActive">Không hoạt động</MudSelectItem>
                    <MudSelectItem Value="EntityStatus.Pending">Chờ</MudSelectItem>
                    <MudSelectItem Value="EntityStatus.PendingForActivation">Chờ hoạt động</MudSelectItem>
                    <MudSelectItem Value="EntityStatus.PendingForConfirmation">Chờ kích hoạt</MudSelectItem>
                    <MudSelectItem Value="EntityStatus.PendingForApproval">Chờ chấp thuận</MudSelectItem>
                    <MudSelectItem Value="EntityStatus.Locked">Khóa</MudSelectItem>
                </MudSelect>
            </MudItem>
            <MudItem xs="12" sm="12" md="12">
                <MudTextField @bind-Value="_filmDto.Description" Required="true" ErrorText="@GetErrorText(_filmDto.Description)" Placeholder="Mô tả" Lines="5" />
            </MudItem>
        </MudGrid>
        <MudGrid Class="mt-3">
            <MudItem xs="6" sm="6" md="6">
                <MudFileUpload T="IBrowserFile" FilesChanged="UploadFiles">
                    <ActivatorContent>
                        <MudButton HtmlTag="Placeholder" Variant="MudBlazor.Variant.Filled" Color="Color.Primary" StartIcon="@Icons.Material.Filled.CloudUpload">Ảnh</MudButton>
                    </ActivatorContent>
                </MudFileUpload>
            </MudItem>
            @if (imageUrl != null)
            {
                <MudItem xs="6" sm="6" md="6">
                    <MudImage Style="width:60%;" Src="@imageUrl" />
                </MudItem>
            }
        </MudGrid>
        <MudGrid Class="mt-3">
            <MudItem xs="6" sm="6" md="6">
                <MudFileUpload T="IBrowserFile" FilesChanged="UploadPosterFiles">
                    <ActivatorContent>
                        <MudButton HtmlTag="Placeholder" Variant="MudBlazor.Variant.Filled" Color="Color.Primary" StartIcon="@Icons.Material.Filled.CloudUpload">Ảnh Bìa</MudButton>
                    </ActivatorContent>
                </MudFileUpload>
            </MudItem>
            @if (posterUrl != null)
            {
                <MudItem xs="6" sm="6" md="6">
                    <MudImage Style="width:60%;" Src="@posterUrl" />
                </MudItem>
            }
        </MudGrid>
        <MudGrid Class="mt-3">
            <MudItem xs="6" sm="6" md="6">
                <MudFileUpload T="IBrowserFile" FilesChanged="UploadTrailerFiles">
                    <ActivatorContent>
                        <MudButton HtmlTag="Placeholder" Variant="MudBlazor.Variant.Filled" Color="Color.Primary" StartIcon="@Icons.Material.Filled.CloudUpload">Trailer</MudButton>
                    </ActivatorContent>
                </MudFileUpload>
            </MudItem>
            @if (trailerUrl != null)
            {
                <MudItem xs="6" sm="6" md="6">
                    <MudImage Style="width:60%;" Src="@trailerUrl" />
                </MudItem>
            }
        </MudGrid>
    </DialogContent>
    <DialogActions>
        <MudButton Color="Color.Error" OnClick="Cancel">Hủy</MudButton>
        <MudButton Color="Color.Primary" OnClick="OnButtonClicked">Chỉnh sửa</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter] MudDialogInstance _mudDialog { get; set; }

    [Inject]
    public IFilmRepo _filmRepo { get; set; }

    public FilmDto _filmDto = new();

    public FilmUpdateRequest obj = new();
    public ViewFilmWithPaginationRequest customer_ = new();

    public string imageUrl { get; set; } = "";
    public string posterUrl { get; set; } = "";
    public string trailerUrl { get; set; } = "";

    [Parameter]
    public Guid idFilm { set; get; }

    IList<IBrowserFile> files = new List<IBrowserFile>();
    ImageHandle imageHandle = new();

    DateTime? _releaseDate { get; set; }

    private async Task UploadFiles(IBrowserFile file)
    {
        var filmFolderPath = Path.Combine(Directory.GetCurrentDirectory(), "wwwroot", "Image", "Film");

        if (!Directory.Exists(filmFolderPath))
        {
            Directory.CreateDirectory(filmFolderPath);
        }

        var fileName = Path.GetFileName(file.Name);
        var filePath = Path.Combine(filmFolderPath, fileName);

        using (var stream = new FileStream(filePath, FileMode.Create))
        {
            await file.OpenReadStream().CopyToAsync(stream);
        }

        imageUrl = $"/image/Film/{fileName}";
        _filmDto.UrlImage = imageUrl;

        files.Add(file);
    }

    private async Task UploadPosterFiles(IBrowserFile file)
    {
        var filmFolderPath = Path.Combine(Directory.GetCurrentDirectory(), "wwwroot", "Image", "Film");

        if (!Directory.Exists(filmFolderPath))
        {
            Directory.CreateDirectory(filmFolderPath);
        }

        var fileName = Path.GetFileName(file.Name);
        var filePath = Path.Combine(filmFolderPath, fileName);

        using (var stream = new FileStream(filePath, FileMode.Create))
        {
            await file.OpenReadStream().CopyToAsync(stream);
        }

        posterUrl = $"/image/Film/{fileName}";
        _filmDto.PosterURL = posterUrl;

        files.Add(file);
    }

    private async Task UploadTrailerFiles(IBrowserFile file)
    {
        var filmFolderPath = Path.Combine(Directory.GetCurrentDirectory(), "wwwroot", "Image", "Film");

        if (!Directory.Exists(filmFolderPath))
        {
            Directory.CreateDirectory(filmFolderPath);
        }

        var fileName = Path.GetFileName(file.Name);
        var filePath = Path.Combine(filmFolderPath, fileName);

        using (var stream = new FileStream(filePath, FileMode.Create))
        {
            await file.OpenReadStream().CopyToAsync(stream);
        }

        trailerUrl = $"/image/Film/{fileName}";

        _filmDto.TrailerURL = trailerUrl;

        files.Add(file);
    }

    private async Task OnButtonClicked()
    {
        try
        {
            obj.Id = _filmDto.Id;
            obj.Code = _filmDto.Code;
            obj.Title = _filmDto.Title;
            obj.DirectedBy = _filmDto.DirectedBy;
            obj.Actor = _filmDto.Actor;
            obj.Language = _filmDto.Language;
            obj.UrlImage = _filmDto.UrlImage;
            obj.PosterURL = _filmDto.PosterURL;
            obj.TrailerURL = _filmDto.TrailerURL;
            obj.Genres = _filmDto.Genres;
            obj.Duration = _filmDto.Duration;
            DateTimeOffset releaseDATE = new DateTimeOffset((DateTime)_releaseDate!, TimeSpan.Zero);
            obj.ReleaseDate = releaseDATE;
            obj.Script = _filmDto.Script;
            obj.AgeRating = _filmDto.AgeRating;
            obj.Status = _filmDto.Status;
            obj.ShowDates = new List<DateTimeOffset>
            {
                DateTimeOffset.Now
            };
            obj.ShowTimes = new List<DateTimeOffset>
            {
                DateTimeOffset.Now.Date
            };
            obj.Description = _filmDto.Description;
            bool? confirm = await _dialogService.ShowMessageBox(
         "Xác nhận",
         "Bạn có chắc chắn sửa?",
         yesText: "Xác nhận", cancelText: "Hủy");
            if (confirm == true)
            {
                var result = await _filmRepo.UpdateAsync(obj);
                if (result == true)
                {
                    await Task.Delay(1000);
                    _mudDialog.Close(DialogResult.Ok(true));
                    _snackbar.Add("Sửa thành công", Severity.Success);
                    _navigate.NavigateTo("/film/list");
                    StateHasChanged();
                }
                else
                {
                    _snackbar.Add
                    (
                        "Sửa thất bại",
                            Severity.Error
                    );
                }
            }
        }
        catch (Exception ex)
        {
            await Task.Delay(500);
            _navigate.NavigateTo(_navigate.Uri, forceLoad: true);
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    private async Task LoadData()
    {
        var result = await _filmRepo.GetByIdAsync(idFilm);
        _filmDto = result.Data!;
        _releaseDate = _filmDto.ReleaseDate.DateTime;
    }

    void Cancel() => _mudDialog.Cancel();

    private string GetError(DateTime? date)
    {
        if (date == null)
        {
            return "Vui lòng chọn ngày khởi chiếu.";
        }
        return string.Empty;
    }

    private string GetErrorText(string value)
    {
        if (string.IsNullOrWhiteSpace(value))
        {
            return "Vui lòng nhập giá trị.";
        }

        // Kiểm tra các điều kiện khác (nếu cần)

        return null;
    }
}
