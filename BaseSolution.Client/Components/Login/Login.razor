@page "/login"
@using System.Text.RegularExpressions
@using System.ComponentModel.DataAnnotations
@using BaseSolution.Application.DataTransferObjects.Account
@using BaseSolution.Application.DataTransferObjects.Account.Request
@using BaseSolution.Application.DataTransferObjects.Customer
@using BaseSolution.Application.DataTransferObjects.Customer.Request
@using BaseSolution.Application.DataTransferObjects.Department
@using BaseSolution.Application.DataTransferObjects.Department.Request
@using BaseSolution.Application.DataTransferObjects.DepartmentFilm.Request
@using BaseSolution.Application.DataTransferObjects.Film
@using BaseSolution.Application.DataTransferObjects.Film.Request
@using BaseSolution.Application.DataTransferObjects.Role
@using BaseSolution.Application.DataTransferObjects.Role.Request
@using BaseSolution.Application.DataTransferObjects.User
@using BaseSolution.Application.DataTransferObjects.User.Request
@using BaseSolution.Client.Components.SignUp;
@using BaseSolution.Client.Components.ForgotPassword;
@using BaseSolution.Client.Repositories.Interfaces
@using Newtonsoft.Json.Linq

@layout EmptyLayout
@inject IDialogService DialogService
@inject ISnackbar _snackbar
@inject NavigationManager _navigation
@inject SaveCustomerId saveCustomerId

<style>
* {
	box-sizing: border-box;
}

body {
    background: linear-gradient(to bottom, #0f0c29fa, #302b6382, #24243e);
	display: flex;
	justify-content: center;
	align-items: center;
	flex-direction: column;
	font-family: 'Montserrat', sans-serif;
	height: 100vh;
	margin: -20px 0 50px;
}

h1 {
	font-weight: bold;
	margin: 0;
}

h2 {
	text-align: center;
}

p {
	font-size: 14px;
	font-weight: 100;
	line-height: 20px;
	letter-spacing: 0.5px;
	margin: 20px 0 30px;
}

span {
	font-size: 12px;
}

a {
	color: #333;
	font-size: 14px;
	text-decoration: none;
	margin: 15px 0;
}

button {
	border-radius: 20px;
    border: 1px solid #351181ad;
    background-color: #381384ab;
	color: #FFFFFF;
	font-size: 12px;
	font-weight: bold;
	padding: 12px 45px;
	letter-spacing: 1px;
	text-transform: uppercase;
	transition: transform 80ms ease-in;
}

button:active {
	transform: scale(0.95);
}

button:focus {
	outline: none;
}

button.ghost {
	background-color: transparent;
    border-color: #d8d0dffc;
}

form {
    background-color: #d8d0dffc;
	display: flex;
	align-items: center;
	justify-content: center;
	flex-direction: column;
	padding: 0 50px;
	height: 100%;
	text-align: center;
}

input {
	background-color: #eee;
	border: none;
	padding: 12px 15px;
	margin: 8px 0;
	width: 100%;
}

.container {
	background-color: #fff;
	border-radius: 10px;
  	box-shadow: 0 14px 28px rgba(0,0,0,0.25), 
			0 10px 10px rgba(0,0,0,0.22);
	position: relative;
	overflow: hidden;
	width: 768px;
	max-width: 100%;
	min-height: 480px;
    height:77%;
}

.form-container {
	position: absolute;
	top: 0;
	height: 100%;
	transition: all 0.6s ease-in-out;
}

.sign-in-container {
	left: 0;
	width: 50%;
	z-index: 2;
}

.container.right-panel-active .sign-in-container {
	transform: translateX(100%);
}

.sign-up-container {
	left: 0;
	width: 50%;
	opacity: 0;
	z-index: 1;
}

.container.right-panel-active .sign-up-container {
	transform: translateX(100%);
	opacity: 1;
	z-index: 5;
	animation: show 0.6s;
}

.overlay-container {
	position: absolute;
	top: 0;
	left: 50%;
	width: 50%;
	height: 100%;
	overflow: hidden;
	transition: transform 0.6s ease-in-out;
	z-index: 100;
}

.container.right-panel-active .overlay-container{
	transform: translateX(-100%);
}

.overlay {
    background: -webkit-linear-gradient(to right, #24243e33, #302b6369, #24243e21);
    background: linear-gradient(to bottom, #24243e33, #302b6369, #24243e21);
    background-repeat: no-repeat;
	background-size: cover;
	background-position: 0 0;
	color: #FFFFFF;
	position: relative;
	left: -100%;
	height: 100%;
	width: 200%;
  	transform: translateX(0);
	transition: transform 0.6s ease-in-out;
}

.container.right-panel-active .overlay {
  	transform: translateX(50%);
}

.overlay-panel {
	position: absolute;
	display: flex;
	align-items: center;
	justify-content: center;
	flex-direction: column;
	padding: 0 40px;
	text-align: center;
	top: 0;
	height: 100%;
	width: 50%;
	transform: translateX(0);
	transition: transform 0.6s ease-in-out;
}

.overlay-left {
	transform: translateX(-20%);
}

.container.right-panel-active .overlay-left {
	transform: translateX(0);
    background: linear-gradient(to bottom, #24243ec9, #302b63, #24243ec9);
}

.overlay-right {
	right: 0;
	transform: translateX(0);
    background: linear-gradient(to bottom, #24243ec9, #302b63, #24243ec9);
}

.container.right-panel-active .overlay-right {
	transform: translateX(20%);
}

.social-container {
	margin: 20px 0;
}

.social-container a {
    border: 1px solid #333;
	border-radius: 50%;
	display: inline-flex;
	justify-content: center;
	align-items: center;
	margin: 0 5px;
	height: 40px;
	width: 40px;
}
.flex-sb-m {
    display: -webkit-box;
    display: -webkit-flex;
    display: -moz-box;
    display: -ms-flexbox;
    display: flex;
    justify-content: space-between;
    align-items: center;
}

.w-full {
    width: 100%;
}
</style>

<div class="container" id="container">
    <div class="form-container sign-up-container">
        <form action="#">
            <h1>Đăng ký</h1>
            <div class="social-container">
                <a href="#" class="social"><i class="fab fa-facebook-f"></i></a>
                <a href="#" class="social"><i class="fab fa-google-plus-g"></i></a>
                <a href="#" class="social"><i class="fab fa-linkedin-in"></i></a>
            </div>
            <span>hoặc sử dụng email của bạn để đăng ký</span>
            <input type="text" placeholder="Họ và tên" />
            <input type="email" placeholder="Email" />
            <input type="password" placeholder="Mật khẩu" />
            <input type="password" placeholder="Xác nhận mật khẩu" />
            <div class="flex-sb-m w-full p-t-3 p-b-24" style="margin:10px;">
                <div class="contact100-form-checkbox" style="display:flex;">
                    <input class="input-checkbox100" id="ckb2" type="checkbox" name="remember-me" style="width:5%;margin-top:-7px;">
                    <label class="label-checkbox100" for="ckb2" style="margin:5px;width:100%;">
                        <span>Tôi cam kết tuân theo chính sách bảo mật và điều khoản sử dụng của URF Cinema.</span>
                    </label>
                </div>
            </div>
            <button>Đăng ký</button>
        </form>
    </div>
    <div class="form-container sign-in-container">
        <form action="#">
            <h1>Đăng nhập</h1>
            <div class="social-container">
                <a href="#" class="social"><i class="fab fa-facebook-f"></i></a>
                <a href="#" class="social"><i class="fab fa-google-plus-g"></i></a>
                <a href="#" class="social"><i class="fab fa-linkedin-in"></i></a>
            </div>
            <span>hoặc sử dụng tài khoản của bạn</span>
            <input type="email" placeholder="Email" />
            <input type="password" placeholder="Mật khẩu" />
            <div class="flex-sb-m w-full p-t-3 p-b-24" style="margin:10px;">
                <div class="contact100-form-checkbox" style="display:flex;">
                    <input class="input-checkbox100" id="ckb1" type="checkbox" name="remember-me" style="width:14%;">
                    <label class="label-checkbox100" for="ckb1" style="margin:5px;width:100%;">
                        Nhớ mật khẩu
                    </label>
                </div>
                <a @onclick="OpenDialogg">Quên mật khẩu?</a>
            </div>
            <button>Đăng nhập</button>
        </form>
    </div>
    <div class="overlay-container">
        <div class="overlay">
            <div class="overlay-panel overlay-left">
                <h1>Chào mừng trở lại!</h1>
                <p>Để giữ liên lạc với chúng tôi, vui lòng đăng nhập bằng thông tin cá nhân của bạn</p>
                <button class="ghost" id="signIn">Đăng nhập</button>
            </div>
            <div class="overlay-panel overlay-right">
                <h1>Chào bạn!</h1>
                <p>Nhập thông tin cá nhân của bạn và bắt đầu hành trình cùng chúng tôi</p>
                <button class="ghost" id="signUp">Đăng ký</button>
            </div>
        </div>
    </div>
</div>
<script>
    const signUpButton = document.getElementById('signUp');
    const signInButton = document.getElementById('signIn');
    const container = document.getElementById('container');

    signUpButton.addEventListener('click', () => {
    container.classList.add("right-panel-active");
    });

    signInButton.addEventListener('click', () => {
        container.classList.remove("right-panel-active");
    });
</script>
@* @if (!showLogin)
{ *@
@*     <MudDialog>
        <DialogContent> *@
          @*   <MudTabs Elevation="4" Rounded="true" Centered="true">
                <MudTabPanel Text="Đăng nhập" />
                <MudTabPanel @onclick="OpenDialog" Variant="Variant.Filled" Text="Đăng ký" />
            </MudTabs>
            <MudForm Model="_login" @ref="form">
                <MudTextField T="string" @bind-Value="_login.UserName" Label="Tài khoản" />
                <MudTextField @bind-Value="_login.Password" Label="Mật khẩu" Variant="Variant.Text" InputType="@PassWordInput" Adornment="Adornment.End" OnAdornmentClick="ButtonTestclick" AdornmentAriaLabel="Show Password" AdornmentIcon="@PassWordInputIcon" />
                <MudGrid Class="mt-3">
                    <MudItem xs="8">
                        <MudText @onclick="OpenDialogg" Variant="Variant.Filled" Color="Color.Warning"> Quên mật khẩu ? </MudText>
                    </MudItem>
                    <MudItem xs="4">
                    </MudItem>
                </MudGrid>
            </MudForm> *@
            @* <MudRadioGroup @bind-SelectedOption="@option" ReadOnly="ReadOnly">
                @foreach (var role in _lstOption)
                {
                    <MudRadio Option="role.Name">@role.Name</MudRadio>
                }

            </MudRadioGroup>  *@
    @*     </DialogContent>
        <DialogActions> *@
           @*  <MudButton Color="Color.Error" OnClick="Cancel">Hủy</MudButton>
            <MudButton OnClick="HandleValidSubmit" Color="Color.Success">Đăng nhập</MudButton> *@
@*         </DialogActions>
    </MudDialog> *@

@* } *@

@code {
    
    [CascadingParameter] MudDialogInstance MudDialog { get; set; }
    [Inject]
    public ILoginRepo _loginRepo { get; set; }

    MudForm form;

    UserDto _userDto = new();


    private List<UserDto> _lstUser;
    private List<RoleDto> _lstRole;
    LoginInputRequest _login = new();
    CustomerDto _customerDto = new();
    private bool showLogin = false;
    [Parameter] public string _opt { get; set; }
    private ViewRoleWithPaginationRequest roleRequest = new();
    public ViewUserWithPaginationRequest obj = new();
    public ViewCustomerWithPaginationRequest Obj = new();
    ViewLoginInput viewLoginInput = new();
    string? error;
    bool _showError = false;
    private string RoleId{ get; set; }
    public ViewLoginInput _loginVM = new();

    RoleDto _roleDto = new();

    public class Option
    {
        public string Name { get; set; }
    }
    public bool ReadOnly { get; set; }

    [Inject]
    public IUserRepo _userRepo { get; set; }
    [Inject]
    public ICustomerRepo _customerRepo { get; set; }
    [Inject]
    public IRoleRepo _roleRepo { get; set; }
    [Parameter]
    public Guid idDepartment { get; set; }

    // private string customer_ = "Khách hàng";
    // private string employee_ = "nhân viên";

    [Parameter]public string customerid{ get; set; }
    public List<CustomerDto> _lst;
    private List<RoleDto> lstRole = new();
    public string departmentid{ get; set; }
    bool isShow;
    InputType PassWordInput = InputType.Password;
    string PassWordInputIcon = Icons.Material.Filled.VisibilityOff;

    public string option { get; set; }


    private void LoginWithGoogle()
    {
        // Implement Google login logic
    }

    void ButtonTestclick()
    {
        @if (isShow)
        {
            isShow = false;
            PassWordInputIcon = Icons.Material.Filled.VisibilityOff;
            PassWordInput = InputType.Password;
        }
        else
        {
            isShow = true;
            PassWordInputIcon = Icons.Material.Filled.Visibility;
            PassWordInput = InputType.Text;
        }
    }

    void Submit() => MudDialog.Close(DialogResult.Ok(true));
    void Cancel() => MudDialog.Cancel();
    private void OpenDialog()
    {
        MudBlazor.DialogOptions closeOnEscapeKey = new MudBlazor.DialogOptions() { CloseOnEscapeKey = true };

        DialogService.Show<SignUp>("Đăng ký", closeOnEscapeKey);
    }
    private void OpenDialogg()
    {
        MudBlazor.DialogOptions closeOnEscapeKey = new MudBlazor.DialogOptions() { CloseOnEscapeKey = true };

        DialogService.Show<ForgotPassword>("Quên mật khẩu", closeOnEscapeKey);
    }
    [Inject] private IDialogService _dialogService { get; set; } = null!;

    private async Task HandleValidSubmit()
    {
        if (option.ToLower() == "khách hàng")
        {
            await LoginSuccessCustomer();
        }
        else
        {
            _snackbar.Add("Cần phải chọn vai trò phía đăng nhập");
        }
    }
    [Inject] public IDepartmentRepo _departmentRepo { get; set; }


    List<DepartmentDto>? _lstDepartment { get; set; }

    ViewDepartmentWithPaginationRequest _request = new() { PageSize = 50 };
    public string SelectedDepartment { get; set; }
    public string SelectedValue { get; set; }
    public string Search { get; set; }
    bool _drawerOpen = true;
    private async Task LoadDepartment()
    {
        var result = await _departmentRepo.GetAllActive(_request);
        _lstDepartment = result.Data.Data.ToList();
    }
    private async Task LoginSuccessCustomer()
    {
        var result = await _loginRepo.LoginCustomer(_login);

        // lấy Id 
        JObject jsonObject = JObject.Parse(result);

        JToken dataToken = jsonObject["data"];
        if (dataToken != null && dataToken.Type != JTokenType.Null)
        {
            string customerId = (string)jsonObject["data"]["id"];
            saveCustomerId.CustomerId = customerId;
            string email = (string)jsonObject["data"]["email"];
            saveCustomerId.Name = email;
            if (result != null)
            {
                _snackbar.Add("Đăng nhập thành công", Severity.Success);
                saveCustomerId.LayoutOption = typeof(MainLayout);
                _navigation.NavigateTo($"/home/{_lstDepartment.First().Id.ToString()}"); // sau khi login xong thì muốn chuyển đến màn nào thì chuyển sang màn đó
                                                                                         // LoadData();
                showLogin = true;
            }
            else
            {
                _navigation.NavigateTo("/");
            }
        }
        else
        {
            _snackbar.Add("Đăng nhập thất bại, Tài khoản không tồn tại",Severity.Error);
        }

    }
    // private async Task LoginSuccess()
    // {

    //     var result = await _loginRepo.SignIn(_login);
    //     var data = result.UserName;
    //     saveCustomerId.Name = data;
    //     if (result != null)
    //     {
    //         // if (result.Code.ToLower() == "Admin" || result.Code.ToLower() == "Nhân viên")
    //         // {
    //         _snackbar.Add("Đăng nhập thành công", Severity.Success);
    //         saveCustomerId.LayoutOption = typeof(MainLayout);
    //         _navigation.NavigateTo("/bill-statistic"); // sau khi login xong thì muốn chuyển đến màn nào thì chuyển sang màn đó
    //     }
    //     else
    //     {
    //         _navigation.NavigateTo("/"); // sau khi login xong thì muốn chuyển đến màn nào thì chuyển sang màn đó
    //     }   
    // }
    protected override async Task OnInitializedAsync()
    {
        await LoadDepartment();
        // await LoadData();
    }
    // public async Task LoadData()
    // {
    //     var result = await _userRepo.GetAllActive(obj);
    //     _lstUser = result.Data!.Data.ToList();
    //     var result1 = await _roleRepo.GetAllActive();
    //     _lstRole = result1.Data!.Data.ToList(); 

    // }

}