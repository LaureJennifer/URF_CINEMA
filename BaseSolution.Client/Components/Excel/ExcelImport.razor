@page "/admin/excel-import"
@using BaseSolution.Application.DataTransferObjects.RoomLayout
@using BaseSolution.Application.DataTransferObjects.RoomLayout.Request
@using BaseSolution.Application.DataTransferObjects.Seat
@using BaseSolution.Application.DataTransferObjects.Seat.Request
@using BaseSolution.Application.Interfaces.Services
@using BaseSolution.Application.ViewModels.Excels.Mics
@using BaseSolution.Client.Repositories.Interfaces
@using BaseSolution.Domain.Entities
@using BaseSolution.Domain.Enums
@using Microsoft.AspNetCore.Components.Web
@using System.Data;
@using System.IO;
@using OfficeOpenXml
@inject ISnackbar _snackBar;
@inject NavigationManager _navigate;
<InputFile style="background-color:#100645;color:#F2FFFF" OnChange="@ImportExcelFile" />

@if (lstSeat == null)
{
    <MudProgressCircular Color="Color.Primary" Indeterminate ="true" />
}
else
{
    if (lstSeat.Count != 0)
    {
        <MudPaper Style="background-color:#2b2c4b" Class="mt-5 mb-5">

            <MudText Align="Align.Center" Style="color:#F2FFFF" Class="mb-2">MÀN HÌNH</MudText>
            <MudGrid>
                @foreach (var rowGroup in lstSeat.GroupBy(x => x.Row).OrderBy(group => group.Key))
                {
                    var rowGr = rowGroup.OrderBy(x => x.SeatColumn);

                    <MudItem xs="12" md="12">
                        <MudGrid>
                            <MudItem xs="1" md="1" Class="d-flex align-center justify-center text-center" Style="color:#F2FFFF">@rowGr.Select(x => x.Row).First()</MudItem>
                                <MudItem xs="10" md="10" Style="text-align:center">
                                    @foreach (var seat in rowGr)
                                {

                                    @if (seat.Price != 0)
                                    {

                                        <MudButton Variant="MudBlazor.Variant.Outlined" Color="GetButtonColor(seat)" Class="mx-1">
                                            @seat.Code
                                        </MudButton>
                                    }
                                    else
                                    {

                                        <MudButton Style="visibility:hidden;" Class="mx-1">
                                            @seat.Code
                                        </MudButton>
                                    }
                                }
                            </MudItem>
                            <MudItem xs="1" md="1" Class="d-flex align-center justify-center text-center" Style="color:#F2FFFF">@rowGr.Select(x => x.Row).First()</MudItem>
                            </MudGrid>
                        </MudItem>
                }
            </MudGrid>

        </MudPaper>
        <MudButton Variant="MudBlazor.Variant.Filled" Style="background-color:#083151;color:#F2FFFF" OnClick="AddRoomLayoutName">Xác nhận thêm mới</MudButton>
    }
}
<MudMessageBox @ref="_mbox" Title="Điền tên bố cục phòng">
    <MessageContent>
        <MudTextField @bind-Value="@_roomLayoutName" Placeholder="Tên bố cục phòng chiếu*" />
    </MessageContent>
    <YesButton>
        <MudButton Color="Color.Primary" OnClick="@(async()=> await OkButton())">
            Ok
        </MudButton>
    </YesButton>
</MudMessageBox>
@code {
    [Inject] IRoomLayoutRepo _roomLayoutRepo { get; set; }
    [Inject] ISeatRepo _seatRepo { get; set; }
    RoomLayoutCreateRequest _roomLayoutCreateRequest = new();
    List<SeatCreateRangeRequest> _lstSeatCreateRangeRequest = new();
    List<SeatDto> lstSeat = new();
    HashSet<SeatDto> clickedSeats = new HashSet<SeatDto>();
    string path { get; set; }
    double maxPrice { get; set; }
    Guid idRoomLayout { get; set; }
    MudMessageBox _mbox { get; set; }
    string? _roomLayoutName { get; set; }

    async Task AddRoomLayoutName()
    {
        bool? result = await _mbox.Show();

    }

    async Task AddRoomLayout()
    {

        if (_roomLayoutName != null)
        {
            _roomLayoutCreateRequest.Name = _roomLayoutName;

        }
        var result = await _roomLayoutRepo.AddAsync(_roomLayoutCreateRequest);
        var roomLayout = await _roomLayoutRepo.GetByNameAsync(_roomLayoutCreateRequest.Name);
        idRoomLayout = roomLayout.Data!.Id;
        if (result)
        {
            _snackBar.Add("Thêm mới sơ đồ phòng thành công!", Severity.Success);
            await AddSeats();
        }
        else 
            _snackBar.Add("Thêm mới sơ đồ phòng thất bại!", Severity.Error);
    }
    async Task AddSeats()
    {
        foreach(var seat in lstSeat)
        {
            SeatCreateRangeRequest seatCreateRangeRequest = new();
            seatCreateRangeRequest.RoomLayoutId = idRoomLayout;
            seatCreateRangeRequest.SeatColumn = seat.SeatColumn;
            seatCreateRangeRequest.Row = seat.Row;
            seatCreateRangeRequest.Code = seat.Code;
            seatCreateRangeRequest.Type = seat.Price == maxPrice ? EntityTypeSeat.vip : EntityTypeSeat.normal;
            seatCreateRangeRequest.Price = seat.Price;
            _lstSeatCreateRangeRequest.Add(seatCreateRangeRequest);
        }
        var result = await _seatRepo.AddRangeAsync(_lstSeatCreateRangeRequest);

        if (result)
        {
            _snackBar.Add("Thêm mới danh sách ghế thành công!", Severity.Success);            
        }
        else
            _snackBar.Add("Thêm mới danh sách ghế thất bại!", Severity.Error);
    }

    Color GetButtonColor(SeatDto seat)
    {
        maxPrice = lstSeat.OrderByDescending(x => x.Price).First().Price;
        if (seat.Price == maxPrice)
        {
            return  Color.Warning;
        }
        else
            return  Color.Tertiary;

    }

    async Task ImportExcelFile(InputFileChangeEventArgs e)
    {
        lstSeat.Clear();
        ExcelPackage.LicenseContext = LicenseContext.NonCommercial;
        var fileStream = e.File.OpenReadStream();
        var ms = new MemoryStream();
        path = e.File.Name;
        await fileStream.CopyToAsync(ms);
        fileStream.Close();
        ms.Position = 0;

        using (var package = new ExcelPackage(ms))
        {
            ExcelWorksheet worksheet = package.Workbook.Worksheets[0];
            var rl = new List<string>();

            int columnCount = worksheet.Dimension.Columns;
            var rowCount = worksheet.Dimension.Rows;

            for (var j = 1; j <= rowCount; j++)
            {
                for (var i = 1; i <= columnCount; i++)
                {
                    var cellValue = worksheet.Cells[j, i].Value?.ToString();
                    rl.Add(cellValue);
                    string column = GetColumnName(i); // cột trong excel là hàng trong sơ đồ 
                    SeatDto seatDto = new SeatDto()
                        {
                            Row = column,  
                            SeatColumn = j,
                            Code = ConvertToCode(j, column),
                            Price = Convert.ToInt32(cellValue),
                    };
                    lstSeat.Add(seatDto);
                }                   
            }

        }
    }

    public string GetColumnName(int columnIndex)
    {
        int dividend = columnIndex;
        string columnName = string.Empty;

        while (dividend > 0)
        {
            int modulo = (dividend - 1) % 26;
            columnName = Convert.ToChar('A' + modulo) + columnName;
            dividend = (dividend - modulo) / 26;
        }

        return columnName;
    }

    //SeatCode 
    public string ConvertToCode(int row, string column)
    {
        return $"{column}{row.ToString()}";
    }
    [Parameter]
    public string SearchString { get; set; } = "";
    [Parameter]
    public EventCallback<string> LoadData { get; set; }

    // [Parameter]
    // public EventCallback<string> OnSearch { get; set; }
    async Task OkButton()
    {
        await AddRoomLayout();

        await LoadData.InvokeAsync(SearchString);
    }
}
